<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Shell.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Shell.AccountPickerOptions2">
            <summary>
            Represents the options used to create an account picker that works with the identity service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions2.AddProviderFilter">
            <summary>
            Gets or sets the picker's custom filter to determine which account providers are allowed to show accounts and
            be visible in the add account picker dialog.
            The Guid will be the AccountProvider identifier guid.
            The object will be the account configuration. For AAD based accounts this will be an IAadConfiguration
            True should be returned if the account provider should be available, False otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AccountPickerOptions2.#ctor(System.Windows.Window,System.String)">
            <summary>
            Initializes a new instance of the options used to create an account picker.
            </summary>
            <param name="parentWindow">The window hosting the account picker.</param>
            <param name="hostId">A unique identifier for this host, usually the package guid, that will be used when reporting telemetry.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="hostId"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parentWindow"/> or <paramref name="hostId"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AccountPickerOptions2.#ctor(System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the options used to create an account picker.
            </summary>
            <param name="parentWindow">The window hosting the account picker.</param>
            <param name="hostId">A unique identifier for this host, usually the package guid, that will be used when reporting telemetry.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="hostId"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parentWindow"/> or <paramref name="hostId"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IWpfAccountPicker2">
            <summary>
            Represents the Windows Presentation Foundation account picker control provided by <see cref="T:Microsoft.VisualStudio.Shell.IVsAccountManagementService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IWpfAccountPicker2.UpdateParentWindow(System.Object)">
            <summary>
            Update the parent window for the account picker control. This may change if you change how the Account picker is hosted after creating it.
            </summary>
            <param name="parentWindow">Parent window.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents">
            <summary>
            This enum specifies the events that a build logger returned from <c>IVsBuildLoggerProvider</c>
            would like to receive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.None">
            <summary>
            No events (will use verbosity instead).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.BuildStartedEvent">
            <summary>
            Build started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.BuildFinishedEvent">
            <summary>
            Build finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectStartedEvent">
            <summary>
            Project started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectFinishedEvent">
            <summary>
            Project finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectEvaluationStartedEvent">
            <summary>
            Project evaluation started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectEvaluationFinishedEvent">
            <summary>
            Project evaluation finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TargetStartedEvent">
            <summary>
            Target started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TargetFinishedEvent">
            <summary>
            Target finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TaskStartedEvent">
            <summary>
            Task started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TaskFinishedEvent">
            <summary>
            Task finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ErrorEvent">
            <summary>
            Error event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.WarningEvent">
            <summary>
            Warning event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.HighMessageEvent">
            <summary>
            High priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.NormalMessageEvent">
            <summary>
            Normal priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.LowMessageEvent">
            <summary>
            Low priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.CustomEvent">
            <summary>
            Custom event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.CommandLine">
            <summary>
            Command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.PerformanceSummary">
            <summary>
            Build performance summary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.NoSummary">
            <summary>
            No build performance summary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ShowCommandLine">
            <summary>
            Show command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.IncludeEvaluationProfile">
            <summary>
            Include evaluation profiles.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.IncludeTaskInputs">
            <summary>
            Include task inputs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider">
            <summary>
            This interface can be exported using MEF. At build time, the build system will
            call it to create a logger for the build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.Verbosity">
            <summary>
            The minimum verbosity that the loggers produced by this interface requires.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.Events">
            <summary>
            The build events that the loggers produced by this interface requires.
            If this is <c>None</c>, then the events required will be determined by the
            minimum verbosity.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.GetLogger(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
             <summary>
             Returns a logger for a build.
            
             The logger returned by this method must handle its method being called on any
             thread and should not block, as they can block the progress of a build.
             </summary>
             <param name="projectPath">The path of the project file that is being built.</param>
             <param name="targets">The target being built.</param>
             <param name="properties">The properties set on the build.</param>
             <param name="isDesignTimeBuild">Whether the build is a user requested build or not.</param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer">
            <summary>
            A type that represents any source-code repository that Visual Studio can open and/or access,
            e.g. solution, folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LocalProperties">
            <summary>
            Properties of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> that pertain to its existence on users machines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.Remote">
            <summary>
            The server-side version of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsFavorite">
            <summary>
            A flag that indicates whether this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> should be presented with special
            emphasis on Visual Studio's MRU.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed">
            <summary>
            Last accessed timestamp.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.#ctor(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties,Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer,System.Boolean,System.DateTimeOffset)">
            <summary>
            Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> instance.
            </summary>
            <param name="localProperties">Local properties.</param>
            <param name="remote">The server-side version.</param>
            <param name="isFavorite">A flag that indicates if this container has been marked favorite by the user.</param>
            <param name="lastAccessed">Last accessed timestamp.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsLocal">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> has local properties set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.HasRemote">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> has a remote set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsSourceControlled">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> has source control properties set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.GetStatus">
            <summary>
            Retrieves the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus"/> of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>, e.g. is item
            under source-control, does it have an associated <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> ... etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithLocalProperties(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LocalProperties"/> is set to the supplied <paramref name="localProperties"/>.
            </summary>
            <param name="localProperties">The new local properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithRemote(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> whose <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> is set to the supplied <paramref name="remote"/>.
            </summary>
            <param name="remote">The new Remote Code Container.</param>
            <remarks>After being added to a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>, a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> will always report its parent <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed"/> instead.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithIsFavorite(System.Boolean)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsFavorite"/> has been set to <paramref name="isFavorite"/>.
            </summary>
            <param name="isFavorite">Present container with special emphasis on Visual Studio's MRU.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithLastAccessed(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed"/> has been set to <paramref name="lastAccessed"/>.
            </summary>
            <param name="lastAccessed">The last-accessed timestamp.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.CompareTo(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> instances based on their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed"/> timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerEqualityComparer">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> instances for equality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties">
            <summary>
            Properties of a Code Container that pertain to its presence on the file-system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.FullPath">
            <summary>
            Location on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.Type">
            <summary>
            Type of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>, e.g. solution, folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.SourceControl">
            <summary>
            Source Control properties of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>, e.g. VCS type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.#ctor(System.String,Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType,Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties"/>.
            </summary>
            <param name="fullPath">The full path on disk.</param>
            <param name="type">Type, e.g. solution, folder.</param>
            <param name="sourceControlProperties">Source Control properties.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fullPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fullPath"/>is either empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithFullPath(System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties"/> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.FullPath"/> is set to the supplied <paramref name="fullPath"/>.
            </summary>
            <param name="fullPath">Full path on disk.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fullPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fullPath"/>is either empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithType(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties"/> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.Type"/> is set to the supplied <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithSourceControl(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties"/> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.SourceControl"/> is set to the supplied <paramref name="sourceControlProperties"/>.
            </summary>
            <param name="sourceControlProperties">The new Source Control properties.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalPropertiesEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties"/> for equality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties">
            <summary>
            Properties of a Code Container that pertain to source control, e.g. VCS name, root path
            of repository ... etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryRootFullPath">
            <summary>
            The Full path of the root directory of this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.SccProvider">
            <summary>
            Source Control Provider ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryName">
            <summary>
            Name of Code Container repository.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties"/>.
            </summary>
            <param name="repositoryRootFullPath">The full path of the root directory.</param>
            <param name="sccProvider">Source Control Provider ID.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryRootFullPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="repositoryRootFullPath"/> or <paramref name="sccProvider"/> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithRepositoryName(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryName"/> is set to <paramref name="repositoryName"/>.
            </summary>
            <param name="repositoryName">The name of the repository.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="repositoryName"/> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithRepositoryRootFullPath(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryRootFullPath"/> is set to <paramref name="repositoryRootFullPath"/>.
            </summary>
            <param name="repositoryRootFullPath">The full path of the root directory.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryRootFullPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="repositoryRootFullPath"/> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithSccProvider(System.Guid)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.SccProvider"/> is set to <paramref name="sccProvider"/>.
            </summary>
            <param name="scccProvider">Source Control provider ID.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sccProvider"/> is empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlPropertiesEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties"/> for equality.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsLocal">
            <summary>
            Indicates that Code Container is present on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsSourceControlled">
            <summary>
            Indicates that Code Container is currently under Source Control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.HasRemote">
            <summary>
            Indicates that Code Container has Remote information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsFaulty">
            <summary>
            Indicates that Code Container information is in an inconsistent state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType">
            <summary>
            The actual type of the underlying Code Container on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType.Project">
            <summary>
            A Visual Studio project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType.Folder">
            <summary>
            A local or remote folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager">
            <summary>
            A interface that defines that public APIs of the class responsible for managing the records of
            the Code Containers accessed by the Shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/> whose Full-Path is equal to <paramref name="fullPath"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.AddOrUpdateAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Adds or updates the records of the Shell for the supplied <paramref name="codeContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.RemoveAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Removes the records of the Shell for the supplied <paramref name="codeContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Clears all records of the Shell of all local and roaming Code Containers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.SubscribeAsync(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.Shell.StatefulReadOnlyList{Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Allows <paramref name="targetBlock"/> to receive updates about Code Containers accessed by the Shell.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer">
            <summary>
            A type that represents the server-side version of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.Name">
            <summary>
            The name of the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> repository in its original web location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CodeContainerProvider">
            <summary>
            The unique identifier of the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider"/> that is used to acquire this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.DisplayUrl">
            <summary>
            The URL that is used to present <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.BrowseOnlineUrl">
            <summary>
            The user-browsable location of this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> on the web. An absolute URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed">
            <summary>
            Last-accessed timestamp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties">
            <summary>
            All properties that are currently present for this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> on the cloud but are not
            recognized by this version of the type. This is intended for the purposes of forward-compatibility with any
            properties that may be added in the future.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.#ctor(System.String,System.Guid,System.Uri,System.Uri,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> instance.
            </summary>
            <param name="name">Name in original web location.</param>
            <param name="codeContainerProvider">Provider ID.</param>
            <param name="displayUrl">Display URL.</param>
            <param name="browseOnlineUrl">Browse-Online URL.</param>
            <param name="lastAccessed">Last-Accessed timestamp in UTC.</param>
            <param name="extraProperties">Additional properties.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any of <paramref name="name"/>, <paramref name="displayUrl"/> or <paramref name="browseOnlineUrl"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="name"/> or <paramref name="codeContainerProvider"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="browseOnlineUrl"/> is not an absolute URL.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithName(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.Name"/> is equal to <paramref name="name"/>.
            </summary>
            <param name="name">Name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithCodeContainerProvider(System.Guid)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CodeContainerProvider"/> is equal to <paramref name="codeContainerProvider"/>.
            </summary>
            <param name="codeContainerProvider">Code Container Provider ID.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="codeContainerProvider"/> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithDisplayUrl(System.Uri)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.DisplayUrl"/> is equal to <paramref name="displayUrl"/>.
            </summary>
            <param name="displayUrl">Display URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="displayUrl"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithBrowseOnlineUrl(System.Uri)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.BrowseOnlineUrl"/> is equal to <paramref name="browseOnlineUrl"/>.
            </summary>
            <param name="browseOnlineUrl">Browse-Online URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="browseOnlineUrl"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="browseOnlineUrl"/> is not absolute.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithLastAccessed(System.DateTimeOffset)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed"/> is equal to <paramref name="lastAccessed"/>.
            </summary>
            <param name="lastAccessed">Last-accessed timestamp.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithExtraProperties(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties"/> is equal to <paramref name="extraProperties"/>.
            </summary>
            <param name="extraProperties">Additional properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CompareTo(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> based on their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed"/> timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> for equality.
            </summary>
            <remarks>When comparing instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties"/> are not taken into account.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerEqualityComparer.IgnoreLastAccessedUtcInstance">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer"/> without taking their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed"/> property into account.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider">
            <summary>
            Information about a provider that is capable of acquiring an online resource to a local machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider.AcquireCodeContainerAsync(System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
            <summary>
            Acquires an online code container locally.
            </summary>
            <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider.AcquireCodeContainerAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
             <summary>
             Acquires a previously known online code container locally.
            
             An example of a previously known code container is for a given signed in user, a code container that was acquired on one device and available as an online code container on a
             second device and available for reacquisition.
             </summary>
             <param name="onlineCodeContainer">The online code container to acquire.</param>
             <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
             <param name="cancellationToken">A cancellation token to cancel the operation.</param>
             <returns>
             A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
             </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.StatefulReadOnlyList`2">
            <summary>
            A read-only list with an associated state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommandNavigationHelper">
            <summary>
            Saves and restores elements to be focused after interacting with
            menus and toolbars.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandFocusMode">
            <summary>
            Values for CommandFocusMode attached property, specify how the control on which it's set
            is registered with CommandFocusManager for handling focus restoration and entering menu mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandFocusMode.None">
            <summary>
            The element does not participate in command focus restoration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandFocusMode.Attached">
            <summary>
            The element does not participate in command focus restoration. However, getting focus to this element
            is tracked and used in command focus restoration of command focus containers, such that focus is never restored
            to this control when lost by other command focus containers, even if they received focus from this control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandFocusMode.Container">
            <summary>
            The element participate in command focus restoration and is consider part of command UI along menus and toolbars
            (when the control is focused InputManager.IsInMenuMode will be set and VS keybindings will not work)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandFocusModeProperty">
            <summary>
            CommandFocusMode property can be set on various UIElements to treat them as part of menus/toolbars focus restoration logic.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.IsCommandNavigableProperty">
            <summary>
            This property can be used to mark a control as part of the keyboard navigation cycle list for menus/toolbars.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CommandNavigationHelper.CommandNavigationOrderProperty">
            <summary>
            This property allows a control to specify its keyboard navigation cycle order with respect to other
            command navigable controls.  A larger value moves the control later in the cycle list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommandNavigationHelper.IsCommandNavigationOrderDirty">
            <summary>
            Gets or sets a value determining whether the order of the navigableControls list is
            in sync with the actual CommandNavigationOrder of each control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommandNavigationHelper.RegisterNavigableControl(System.Windows.UIElement)">
            <summary>
            Registers a control to participate in cross-CommandBar focus using Ctrl+Tab
            and Ctrl+Shift+Tab.
            </summary>
            <param name="contorl">The control to register.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommandNavigationHelper.UnregisterNavigableControl(System.Windows.UIElement)">
            <summary>
            Unregisters a control from participating in cross-CommandBar focus using Ctrl+Tab
            and Ctrl+Shift+Tab.
            </summary>
            <param name="control">The frame control container.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommandNavigationHelper.GetSortedNavigableControls">
            <summary>
            Gets the registered navigable controls in sort navigation order.
            </summary>
            <returns>An IEnumerable over the registered navigable controls.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommentTaskPriority">
            <summary>
            Value that indicates the priority of a task in the task list.
            </summary>
            <remarks>
            <para>
            The values in this enumeration correspond to the values in a the Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity">
            <summary>
            Represents an entry on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.Kind">
            <summary>
            Gets what kind of entry it is.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.FullPath">
            <summary>
            Gets the full path to the file or folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.HasCaseBeenResolved">
            <summary>
            Gets a value that indicates whether the values of this object are case sensitive.
            </summary>
            <remarks>When possible, this value will be set to <c>True</c> by default. However, a known case when it's <c>False</c> is when
            the path comes from an opened solution and that the entire string is either in upper case or in lower case.
            If so, we may want to resolve the case by doing a IO access. Therefore, this property is here to try to limitate the amount of required IO access.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.#ctor(System.String,Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntityKind,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.IFilePathCaseResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity"/> struct.
            </summary>
            <param name="fullPath">Defines the full path to the file or folder.</param>
            <param name="kind">(optional) Defines what kind of entry it is.</param>
            <param name="hasCaseBeenResolved">(optional) Defines whether the values of this object are case sensitive.</param>
            <param name="filePathCaseResolver">(optional) Defines an object designed to resolve the case sensitiveness of this entry. This argument isn't kept if <paramref name="hasCaseBeenResolved"/> is <c>False</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.ResolveCase">
            <summary>
            Resolves the case sensitiveness of the <see cref="P:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.FullPath"/> property if <see cref="P:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity.HasCaseBeenResolved"/> is <c>True</c>.
            </summary>
            <remarks>This method may require an IO access. Call it with precaution.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntityKind">
            <summary>
            Represents the type of <see cref="T:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntityKind.File">
            <summary>
            Defines that the entry is a file on the file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntityKind.Folder">
            <summary>
            Defines that the entry is a folder on the file system.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator">
            <summary>
            Provides a method to enumerate the next entry discovered by the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Current">
            <summary>
            Gets the current element of the enumeration.
            The returned value is undefined before the first call to <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)"/> and following a call to MoveNext that returned false.
            Multiple calls to <see cref="P:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Current"/> with no intervening calls to <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)"/> will return the same object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid">
            <summary>
            Gets whether the enumerator is still valid or needs to be <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Reset"/>.
            When it's invalid, it means that the enumerator items changed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Invalidated">
            <summary>
            Occurs when the enumerator items changed and that the enumerator needs to be <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Reset"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the next file or folder in the enumeration. This method can be called from any thread but only one thread can call it at any one time.
            </summary>
            <remarks>
            Returns <c>False</c> when <see cref="P:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid"/> is <c>False</c>.
            </remarks>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation. Returns <c>null</c> if there is no entity to fetch.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Reset">
            <summary>
            Restart the enumeration from the beginning with an up to date list of items to enumerate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.IsInEnumerationAsync(Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity,System.Threading.CancellationToken)">
            <summary>
            Gets a value that indicates whether the given <paramref name="entity"/> exists in the current enumeration.
            </summary>
            <remarks>
            This method returns <c>True</c> even if the given item has already been returned by <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)"/>
            and won't be return again until <see cref="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.Reset"/> is called.
            It will return <c>False</c> when <see cref="P:Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid"/> is <c>False</c>.
            </remarks>
            <param name="entity">The entry to verify.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IFilePathCaseResolver">
            <summary>
            Provides a method designed to solve the case sensitiveness of a given path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IFilePathCaseResolver.TryResolve(System.String,Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntityKind,System.String@)">
            <summary>
            Try to resolve the case of a given path.
            </summary>
            <param name="fullPath">The case insensitive full path to solve.</param>
            <param name="kind">Defines what kind of entry on the hard drive map this path (file? folder?).</param>
            <param name="resolvedFullPath">If succeed, provides the case sensitive full path.</param>
            <returns>Returnes <c>True</c> if it detected the case sensitive path successfully.</returns>
            <remarks>When this method is called, it is not guarantee that the entry exists on the hard drive.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IOpenDocumentEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate opened documents in the IDE.
            </summary>
            <example>
            <code>
            [Import]
            public IOpenDocumentEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetListAsync(Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetQueue(Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetEnumerator(Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetEnumeratorFavoringOpenDocuments(Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator)">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>
            <para>This enumerates everything in <paramref name="fileEntityEnumerator"/> but return all the open documents first, when they are part of the given <paramref name="fileEntityEnumerator"/>.</para>
            <para>The current document, if there is one and it is eligible, will always be first.</para>
            </remarks>
            <param name="fileEntityEnumerator">Defines an enumerator where opened document must be merged to.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IPathFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in a defined set of folders.
            </summary>
            <example>
            <code>
            [Import]
            public IPathFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.FileEnumerationService.IPathFileEnumeratorFactory.GetQueue(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)" -->
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IPathFileEnumeratorFactory.GetEnumerator(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all files in defined location(s).
            </summary>
            <remarks>
            This enumerator never gets invalidated.
            </remarks>
            <param name="paths">Defines a list of absolute folder path where the files must be retrieved.</param>
            <param name="includeSubfolders">(optional) Defines whether the subfolders must be included or not. By default, this value is <c>True</c>.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IProjectFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in an opened project.
            </summary>
            <example>
            <code>
            [Import]
            public IProjectFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IProjectFileEnumeratorFactory.GetListAsync(System.Guid,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IProjectFileEnumeratorFactory.GetQueue(System.Guid,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IProjectFileEnumeratorFactory.GetEnumerator(System.Guid,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all files a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.IPriorityFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files by favoriting a specified list of files.
            </summary>
            <example>
            <code>
            [Import]
            public IPriorityFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.IPriorityFileEnumeratorFactory.GetEnumeratorFavoringPriorityFiles(Microsoft.VisualStudio.Shell.FileEnumerationService.IFileEntityAsyncEnumerator,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.FileEnumerationService.FileEntity})">
            <summary>
            Get an enumerator that returns first the given ordered priority files.
            </summary>
            <remarks>
            <para>This enumerates everything in the given <paramref name="fileEntityEnumerator"/> but return all the given <paramref name="orderedPriorityFileEntities"/> first, if they exist in the enumerator.</para>
            </remarks>
            <param name="fileEntityEnumerator">Defines an enumerator where opened document must be merged to.</param>
            <param name="orderedPriorityFileEntities">Ordered list of file entity to prioritize to be enumerated first.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in an opened solution or opened folder.
            </summary>
            <example>
            <code>
            [Import]
            public ISolutionFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.IsSolutionOpenedChanged">
            <summary>
            Occurs when a solution or folder are opened or closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.IsSolutionOpened">
            <summary>
            Gets whether a solution or folder are opened in Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.FindMatchingFileNamesAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all files with file names matching the given query.
            </summary>
            <remarks>
            As opposed to using methods with <see cref="T:Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter"/> parameters,
            this method performs a non-linear, binary search, looking just at file
            names.
            </remarks>
            <param name="query">The search query to match.</param>
            <param name="includePrefixMatches">Indicates that search should include non-exact matches.</param>
            <param name="waitForValidCache">
            Indicates that search should wait for a valid cache instead of using what is already cached.
            </param>
            <param name="cancellationToken">Cancels the pending search.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.GetListAsync(System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.GetQueue(System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileEnumerationService.ISolutionFileEnumeratorFactory.GetEnumerator(System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FileEnumerationService.PathFilter">
            <summary>
            Determines whether the given full path is eligible to be considered as part of the result of the file enumeration service.
            </summary>
            <param name="fullPath">Defines the full path to the file or folder.</param>
            <param name="isDirectory">(optional) Defines whether the current item is a directory or a file.</param>
            <returns>Returns <c>True</c> if the entry is eligible.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs">
            <summary>
            Raised by a control on Visual Studio's UI thread when it has a child Win32 HWND that belongs to a different thread and has acquired
            Win32 focus. Required for proper focus restoration when Visual Studio loses / regains activation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs.FocusChangeForCrossThreadClientEvent">
            <summary>
            An event raised to alert Visual Studio to the fact that a window belonging to a thread other than Visual Studio's UI thread is gaining Win32 focus.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs.#ctor(System.IntPtr)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs"/> object which is associated with the given window.
            </summary>
            <param name="hwndGainingFocus">The HWND of the window belonging to a thread other than the Visual Studio UI thread that is gaining focus.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs.#ctor(System.IntPtr,System.Object)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs"/> object which is associated with the given window and eminating from the given source object.
            </summary>
            <param name="hwndGainingFocus">The HWND of the window belonging to a thread other than the Visual Studio UI thread that is gaining focus.</param>
            <param name="source">The alternate source to list as the source of the event.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FocusChangeForCrossThreadClientEventArgs.HwndGainingFocus">
            <summary>
            The HWND of the window that is gaining focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService">
            <summary>
            Service that schedules single file generators to run.
            Implemented by the project system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService.RunGeneratorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers the generator to be run on a file.
            </summary>
            <param name="filePath">Full path to the file.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task representing the generation progress.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService.RunGeneratorAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Triggers generators to be run on a set of files.
            </summary>
            <param name="filePaths">List of full paths to each file.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task representing the generation progress.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync">
            <summary>
            Asynchronously transforms a single input file into a single output file that can be compiled or added to a project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync.GetDefaultExtensionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the file extension that is given to the output file name.
            </summary>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task that returns the file extension that is to be given to the output file name.
            The returned extension must include a leading period.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync.GenerateAsync(System.String,System.String,System.String,System.IO.Stream,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the transformation.
            </summary>
            <param name="inputFilePath">The full path of the input file.</param>
            <param name="inputFileContents">The contents of the input file.</param>
            <param name="defaultNamespace">The namespace into which the generated code will be placed.
            This parameter is only meaningful for custom tools that generate code.</param>
            <param name="outputStream">The stream containing the results of the generation, which should be written to the generated file.</param>
            <param name="generatorProgress">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress"/> object through which the generator can report its progress to the project system.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task that corresponds to the file generation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAsyncAttachedCollectionSource">
            <summary>
            Represents an IAttachedCollectionSource object that can report on whether or not
            the HasItems property is currently being initialized, and which raises an INotifyPropertyChanged
            event when the IsInitializingHasItems value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAsyncAttachedCollectionSource.IsUpdatingHasItems">
            <summary>
            Gets whether or not the HasItems property is currently being updated.  Because
            updating HasItems may be an asynchronous operation, consumers of the IAttachedCollectionSource
            may want to wait for this property to become false before deciding that there are no items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider2.GetServiceAsync(System.Type,System.Boolean)">
            <summary>
            Retrieves an async services but allows the caller to hint that exceptions may not have to be swallowed. It does not guarantee exceptions will be thrown however for failure cases.
            </summary>
            <param name="serviceType">Service to get.</param>
            <param name="swallowExceptions">When this parameter is true GetServiceAsync will swallow exceptions thrown during the GetServiceAsync call and return null. When this is false exceptions thrown during the get service call may be thrown out of the method. A setting of false does not guarantee exceptions will be thrown for all services failures, or all service types. </param>
            <returns>A task representing the service retrieval whose result is the service, or null if the retrieval failed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionService">
            <summary>
            Represents a service that can get attached collections for an item based on a known relationship,
            and which can enumerate relationships supported for an item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetRelationship(System.Object,System.String)">
            <summary>
            Given a name for a relationship, returns an IAttachedRelationship
            containing a localizable description of the relationship.
            </summary>
            <param name="item">The item for which to get the relationship display information.</param>
            <param name="relationshipName">The known name for the relationship.</param>
            <returns>An IAttachedRelationship instance corresponding to the relationship,
            or null if the relationship is unknown.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetRelationships(System.Object)">
            <summary>
            Gets the set of relationships supported for a given item.
            </summary>
            <param name="item">The item to get the supported relationships for.</param>
            <returns>An enumeration of supported relationships.</returns>
            <remarks>For a concrete example, an item of type "Class" might support
            relationships like "Base Types", "Derived Types", and "Members".
            These relationship descriptions would be returned from this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetOrCreateCollectionSource(System.Object,System.String)">
            <summary>
            Gets or creates an IAttachedCollectionSource instance representing an attached collection
            for the given relationship on the given item.
            </summary>
            <param name="item">The item to get the attached collection from.</param>
            <param name="relationshipName">The relationship name describing
            which attached collection to get or create.</param>
            <returns>An IAttachedCollectionSource instance representing the attached collection.</returns>
            <remarks>For a concrete example, an item of type "Class" for a relationship identified
            by "Base Types" would result in the construction of an IAttachedCollectionSource whose
            Items property contain the base types for the item.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionSource">
            <summary>
            Represents an object instance that can return a collection of items,
            and that knows whether or not any items exist without realizing the items
            themselves.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.SourceItem">
            <summary>
            Gets the object used to create this IAttachedCollectionSource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.HasItems">
            <summary>
            Returns true if this IAttachedCollectionSource has any items, otherwise false.
            Accessing HasItems does not necessarily create the items themselves.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.Items">
            <summary>
            Gets (and creates, if necessary) the collection of items associated
            with this IAttachedCollectionSource.
            </summary>
            <remarks>
            If this collection does not change after the initial collection is returned, you may return any implementation of IEnumerable.
            However, if this collection does change over time, you may return any collection which implements INotifyCollectionChanged
            (such as an ObservableCollection).  If you return a collection implementing INotifyCollectionChanged, the collection's consumer will
            observe changes to the collection and update the view on the collection when the collection is modified.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider">
            <summary>
            Represents a service which can enumerate relationships that exist for an object the service understands,
            and which can create attached collections for a relationship and object the service understands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.CreateCollectionSource(System.Object,System.String)">
            <summary>
            For a given object and relationship, create an IAttachedCollectionSource.  This attached
            collection should contain items for the given relationship as they related to the source item.
            </summary>
            <param name="item">The source item for which the collection should be created.</param>
            <returns>A new attached collection source, or null if this provider does not support
            creation of collections for this object.</returns>
            <param name="relationshipName">The name of the relationship for which a collection should be created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.GetRelationships(System.Object)">
            <summary>
            For a given object, enumerate the possible relationship collections this provider
            knows about.
            </summary>
            <param name="item">The item to enumerate possible relationships for.</param>
            <returns>An enumerable of relationships.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedRelationship">
            <summary>
            Contains metadata about an attached relationship, used by the <see cref="T:Microsoft.VisualStudio.Shell.IAttachedCollectionService"/>
            to describe relationships between objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedRelationship.Name">
            <summary>
            Gets the non-localized uniquely-identifying name of this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedRelationship.DisplayName">
            <summary>
            Gets a localizable description of this relationship.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICacheableAttachedCollectionSource">
            <summary>
            Represents an IAttachedCollectionSource that can potentially be cached.
            Cached sources do not need to be re-created each time they're requested.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICacheableAttachedCollectionSource.CanCache">
            <summary>
            Gets whether or not the items from this IAttachedCollectionSource can be cached.
            IAttachedCollectionSource instances that do not support observable changes to their items
            (via INotifyCollectionChanged) but which do change over time
            should not be cached, since caching the IAttachedCollectionSource will permanently
            cache a stale collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IClientRightsAdditionalMetadata">
            <summary>
            This interface is for passing any additional metadata from the client rights.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IClientRightsAdditionalMetadata.ClientRightsMetadata">
            <summary>
            We are using a dictionary as we do not know what data we may get in future
            At present it only contains the nonlocalized license description for telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICommentTaskToken">
            <summary>
            This interface is used to get information about one of the tokens used to generate tasks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICommentTaskToken.Priority">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.CommentTaskPriority"/> to use when creating tasks based on this token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICommentTaskToken.Text">
            <summary>
            Gets the keyword used to identify tasks in comments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IErrorList">
            <summary>
            This interface is used to get the state of the various switches in the chrome around the ErrorList tool window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.AreOtherErrorSourceEntriesShown">
            <summary>
            Returns true if filter for the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSource"/> column does not exclude entries
            that have the label associated with <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ErrorSource.Other"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.AreBuildErrorSourceEntriesShown">
            <summary>
            Returns true if filter for the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSource"/> column does not exclude entries
            that have the label associated with <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ErrorSource.Build"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.AreErrorsShown">
            <summary>
            Returns true if filter for the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSeverity"/> column does not exclude entries
            that have the label associated with __VSERRORCATEGORY.EC_ERROR.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.AreWarningsShown">
            <summary>
            Returns true if filter for the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSeverity"/> column does not exclude entries
            that have the label associated with __VSERRORCATEGORY.EC_WARNING.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.AreMessagesShown">
            <summary>
            Returns true if filter for the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSeverity"/> column does not exclude entries
            that have the label associated with __VSERRORCATEGORY.EC_MESSAGE.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IErrorList.TableControl">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> used to display the error list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IJoinableTaskFactoryAwareHostObject">
            <summary>
            Allows for a host object to be able to use the main thread without blocking a build that is blocked on the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IJoinableTaskFactoryAwareHostObject.SetContext(Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Set the joinable task factory that the host object should use for thread switching operations.
            </summary>
            <param name="factory">The joinable task factory to use.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IMSDNChannel">
            <summary>
            interface for msdn subscription channel information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IMSDNChannel.SubscriptionChannel">
            <summary>
            msdn subscription channel e.g. FTE, RETAIL etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.INonClientArea">
            <summary>
            This interface represents a visual element which may logically contain non-client
            Win32 area when WM_NCHITTEST is sent to an HwndSource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.INonClientArea.HitTest(System.Windows.Point)">
            <summary>
            Given a point, determines what the hit test result should be for
            WM_NCHITTEST.
            </summary>
            <param name="point">The point hit, relative to the screen.</param>
            <returns>The HT* result representing the non-client hit test result, or
            HTNOWHERE if the point is not within this element.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISettingsMachineLocalityEvaluator">
            <summary>
            This interface is used in conjunction with SharedSettingsAttribute to evaluate whether a property value is
            machine-local (i.e. should not roam to other machines) at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISettingsMachineLocalityEvaluator.IsMachineLocal(System.String,System.Object)">
            <summary>
            Evaluates whether a property value is machine-local.
            </summary>
            <param name="name">The full name of the setting as specified via SharedSettingsAttribute.</param>
            <param name="value">The current value of the property.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ITaskList">
            <summary>
            This interface is used to get the state of the TaskList tool window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ITaskList.CommentTokens">
            <summary>
            Get the list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken"/>s the user has defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ITaskList.TableControl">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> used to display the task list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo2">
            <summary>
            Provides additional information from SDK manifests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo2.GetAttributeValue(System.String)">
            <summary>
            Retrieves the value of an attribute in the manifest of an Extesion SDK.
            </summary>
            <param name="attributeName">The name of the attribute to retrieve the value for.</param>
            <returns>The value of the attribute, or null if it was not found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext">
            <summary>
            Provides information about managed types from which toolbox items could be created.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.CreateItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            dicoveryType argument to ProvideToolboxItemDiscoveryAttribute.  This object is only used
            in a secondary appdomain which is unloaded after assembly enumeration completes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.AdditionalAssemblyPaths">
             <summary>
             Gets a collection of additional assembly paths to search for toolbox items.
             </summary>
             <remarks>
             For each framework in the "frameworksToEnumerate" argument of the ProvideToolboxItemDiscovery
             attribute, the toolbox will enumerate all assemblies registered under AssemblyFoldersEx keys,
             and pass their types to GetItemInfo.  However, if you want additional assemblies to show up
             in your list, you can supply their paths here.  You can even omit the "frameworksToEnumerate"
             argument altogether to use only the assemblies returned from this property.  You can return
             null or an empty enumerator if you don't need to provide any additional assemblies.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)">
             <summary>
             Returns the IToolboxItemInfo corresponding to a given type.
             </summary>
             <returns>The info about this type, or null if the type is not a valid toolbox control type recognized by this provider.</returns>
             <remarks>
             This method should inspect the type of the <param name="type">type</param> argument if
             it needs to provide different information depending on the source of the type (such as
             an extension SDK).  See the IToolbox*Type interfaces that derive from IToolboxType.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx">
            <summary>
            Asynchronous methods for the VS file change service (<see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChange"/>).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.AdviseFileChangeAsync(System.String,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS,Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription to changes for a single file.
            </summary>
            <param name="filename">The name of the file to subscribe to.</param>
            <param name="filter">The flags describing the changes to be notified of.</param>
            <param name="sink">The event sink.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been set up.  The task's
            result will be the subscription cookie.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseFileChangeAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Removes a subscription to changes for a single file.
            </summary>
            <param name="cookie">The file subscription cookie.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been removed.  The task's
            result will be the name of the unsubscribed file.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.AdviseDirChangeAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription to changes for a directory.
            </summary>
            <param name="directory">The name of the directory to subscribe to.</param>
            <param name="watchSubdirectories">
            If true, <paramref name="sink"/> is notified of changes to file in <paramref name="directory"/>
            and any of its subdirectories.  If false, <paramref name="sink"/> is notified of changes to
            files in <paramref name="directory"/> only.
            </param>
            <param name="sink">The event sink.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been set up.  The task's
            result will be the subscription cookie.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseDirChangeAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Removes a subscription to changes for a directory.
            </summary>
            <param name="cookie">The file subscription cookie.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been removed.  The task's
            result will be the name of the unsubscribed directory.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.SyncFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Forces change events to be sent for a file.
            </summary>
            <param name="filename">The name of the file to send notifications for.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the notifications have been sent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.IgnoreFileAsync(System.UInt32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Ignores or un-ignores changes in a file or in a subscription.
            </summary>
            <param name="cookie">
            The cookie for the file subscription to ignore.  If this is VSConstants.VSCOOKIE_NIL,
            then all subscriptions for <paramref name="filename"/> are ignored or un-ignored.
            If this is any other value, then the <paramref name="filename"/> parameter is not used.
            </param>
            <param name="filename">
            The name of the file to ignore.  This parameter is not used if <paramref name="cookie"/>
            is any value other than VSConstants.VSCOOKIE_NIL.
            </param>
            <param name="ignore">True to ignore the file or subscription, false to un-ignore.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the operation is finished.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.IgnoreDirAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Ignores or un-ignores changes in a directory and its subdirectories.
            </summary>
            <param name="directory">The name of the directory to ignore.</param>
            <param name="ignore">True to ignore directory, false to un-ignore.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the operation is finished.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsManagedImageService">
            <summary>
            An interface proffered by SVsImageService that allows direct addition of WPF bitmaps
            to the image library.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsManagedImageService.AddCustomImage(System.Windows.Media.ImageSource,System.Boolean)">
            <summary>
            Adds a custom ImageSource to the image service.
            </summary>
            <param name="image">The image to add.</param>
            <param name="canTheme">True if the image can be themed, otherwise false.</param>
            <returns>A handle which tracks the lifetime of the ImageSource in the cache, and
            provides access to the moniker associated with the image.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask">
            <summary>
            Interface for attaching a single JoinableTask with an IVsTask instance.
            </summary>
            <remarks>
            Meant for MICROSOFT INTERNAL USE ONLY.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask.CancellationToken">
            <summary>
            Gets the cancellation token used for this task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask.AssociateJoinableTask(System.Object)">
            <summary>
            Indicates that this IVsTask instance acts as a wrapper around the specified JoinableTask.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod&quot;]/*" />
            <summary>
            How should the assembly be registered/located.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Default">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod.Default&quot;]/*" />
            <summary>
            Default should only be used by tools
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.CodeBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationMethod.CodeBase&quot;]/*" />
            <summary>
            The path to the assembly should be stored in the registry and used to locate the assembly at runtime
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Assembly">
            <summary>
            The assembly should be in the GAC or in PrivateAssemblies
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationAttribute&quot;]" />
            <devdoc>
                This attribute is the basis for all other attributes that can be registered by RegPkg.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.TypeId">
            <summary>
            Override the TypeID property in order to let the RegistrationAttribute derived
            classes to work with System.ComponentModel.TypeDescriptor.GetAttributes(...).
            An attribute derived from this one will have to override this property only if
            it needs a better control on the instances that can be applied to a class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 It also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
                Called to unregister this attribute with the given context.  The context
                contains the location where the registration information should be removed.
                It also contains things such as the type being unregistered, and path information.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key&quot;]" />
            <devdoc>
                Abstraction around a registry key.  This may or may not actually
                point to a real registry key.  It could point to a file.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.Close&quot;]" />
            <devdoc>
                Called to close this key.  Alternately, you may use the C# "using"
                syntax on keys, since they are IDisposable. Always close keys when you
                are done with them.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.CreateSubkey&quot;]" />
            <devdoc>
                Creates a subkey of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.SetValue&quot;]" />
            <devdoc>
                Sets the name to the given value. Pass an empty string or null into this to
                set the default value for a key.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.System#IDisposable#Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;Key.IDisposable.Dispose&quot;]/*" />
            <internalonly />
            <devdoc>
            Closes the key.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext&quot;]" />
            <devdoc>
                Abstraction around the registry itself.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.ComponentPath&quot;]" />
            <devdoc>
                The path to the compnent that is being registered.  You should always use this rather than the
                codebase of the component type, and you should never assume that this is a physical path on
                disk.  It may be a token that identifies the path at install time.  The "component"
                is the type that the registration attribute was found on.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentType">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RegisteringType&quot;]" />
            <devdoc>
                The type of the component that is being registered.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.InprocServerPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.InprocServerPath&quot;]" />
            <devdoc>
                The path to the COM object supplying the class factory.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CodeBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.CodeBase&quot;]" />
            <devdoc>
                The path to the object being registered (including filename).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RootFolder">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RootFolder&quot;]" />
            <devdoc>
                The path to the installation for the host application (e.g. Visual Studio "C:\Program Files\Microsoft Visual Studio {version}\").
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RegistrationMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RegistrationMethod&quot;]" />
            <devdoc>
            Specify if the assembly should be located using CodeBase or Assembly.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.Log">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.Log&quot;]" />
            <devdoc>
                Returns a text writer that can be used to log registration information.  This should
                be a human readable (and ideally localized) bit of text that describes the
                current registration process.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CreateKey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.CreateKey&quot;]" />
            <devdoc>
                Creates a new key of the given name.  The key is created at the appropriate registration
                point in the registry.  Always close or dispose this key when finished with it.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveKey&quot;]" />
            <devdoc>
            Removes the key of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveValue(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveValue&quot;]" />
            <devdoc>
            Removes the value of the given name under the key of the given keyname.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKeyIfEmpty(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.RemoveKey&quot;]" />
            <devdoc>
            Removes the key of the given name if it has no child key and
            no value.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.EscapePath(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;RegistrationContext.EscapePath&quot;]" />
            <devdoc>
            Escape the string if needed
            This is used by the implementation of the Register method on attributes so that paths be escaped when
            needed. The attribute itself does not know if we are writting to a .reg file or directly to the registry.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.GetPackageRegKeyPath(System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegistrationAttribute.uex" path="docs/doc[@for=&quot;GetPackageRegKeyPath&quot;]" />
            <devdoc>
                Returns the registry path (relative to this AppID's registry root) where the
                registration for the given package is located.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RssCommands">
            <summary>
            Provides the routed commands supported by the VS shell Rss feed reader.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RssCommands.EnableDownload">
            <summary>
            Enable downloading of Rss content.
            </summary>
            <remarks>
            There is no CommandParameter for this command.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RssCommands.PromptForCredentials">
            <summary>
            Prompt the user for web proxy credentials.
            </summary>
            <remarks>
            There is no CommandParameter for this command.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RssCommands.SetUrl">
            <summary>
            Set Rss feed Url.
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to user for the Rss feed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Framework.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Error_DateTimeKindMustBeUtc">
            <summary>
              Looks up a localized string similar to DateTimeKind of timestamp must be DateTimeKind.Utc..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Error_UriMustBeAbsolute">
            <summary>
              Looks up a localized string similar to Uri must be absolute..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceProgressData">
            <summary>
            This class used to propagate service or package load progress for async service and packages
            Messages and values passed through this class will be shown to the user in some appropriate manner by the shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProgressData.#ctor(System.String,System.String)">
            <summary>
            Reports progress with no completion information.
            </summary>
            <param name="waitMessage">Message to be displayed to user.</param>
            <param name="progressText">Message indicating current progress of the operation.</param>
            <remarks>Threaded wait dialog will show marquee style progress bar because no detailed progress information is provided.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProgressData.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Report progress with completion information.
            </summary>
            <param name="waitMessage">Message to be displayed to user.</param>
            <param name="progressText">Message indicating current progress of the operation.</param>
            <param name="currentStep">Current step in the progress.</param>
            <param name="maximumSteps">Total number of steps available.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsServiceProvider">
            <summary>
            Represents a Visual Studio service provider and intended for dynamic discovery of other VS services from MEF components.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.GroupColumnsAttribute">
            <summary>
            Attributes that defines which groups are in an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IDefaultColumnGroup"/> MEF export.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.GroupColumnsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.GroupColumnsAttribute"/>.
            </summary>
            <param name="columns">The columns in the group.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Shell.TableControl.IDefaultColumnGroup" -->
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ISinkToTableControlService">
            <summary>
            Service that can be used to get the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> associated with an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/> (if any).
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            <code>
            [Import]
            internal ISinkToTableControlService SinkToTableControlService  { get; private set; }
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ISinkToTableControlService.TryGetTableControl(Microsoft.VisualStudio.Shell.TableManager.ITableDataSink,Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4@)">
            <summary>
            Try to get the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4"/> that is using <paramref name="sink"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle2">
            <summary>
            A wrapper for an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> or a "virtual" entry created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle2.NavigateTo(System.Boolean,System.Boolean)">
            <summary>
            Navigates to the data the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with represents.
            </summary>
            <param name="isPreview">Should the document containing the entry be opened in the preview pane if it is not already open.</param>
            <param name="shouldActivate">Should focus be placed in the document containing the entry.</param>
            <remarks>
            <para>Calling this is equivalent to the user initiating an navigation action from the table control itself.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandle2Helper">
            <summary>
            Helper class to let an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> act like an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle2"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState">
            <summary>
            Representation of the persistent state associated with a <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> in a particular instance of a <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState.Name">
            <summary>
            Name of the column that this state applies to.
            </summary>
            <remarks>
            <para>
            Equal to <see cref="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.Name"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState.IsVisible">
            <summary>
            The current visibility of the column.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState.Width">
            <summary>
            The current width of the column in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState.SortPriority">
            <summary>
            Sort priority for the column.
            </summary>
            <remarks>
            <para>
            A priority of 0 means the table is not sorted using this column.
            </para>
            <para>
            If more than one column has a priority > 0, then the table sorted by chaining the columns together in priority order (e.g. if two rows are equal according to the
            column with a priority of 1, then the two rows are compared using the column with a priority of 2, etc.).
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState.DescendingSort">
            <summary>
            Indicates whether the sort is a descending sort.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnState.#ctor(System.String,System.Boolean,System.Double,System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState"/> with the indicated attributes.
            </summary>
            <param name="name">The name of the column that this state applies to.</param>
            <param name="isVisible">The visibility of the column.</param>
            <param name="width">The width of the column in pixels.</param>
            <param name="sortPriority">The sort priority for the column.</param>
            <param name="descendingSort">true if a descending sort should be used for the column.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState"/> to add support for grouping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter">
            <summary>
            A helper class that implements an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryFilter"/> that excludes entries whose untruncated text matches anything in a list of strings.
            </summary>
            <remarks>
            This class is immutabe. Use the <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.CloneAndAdd(System.String)"/> or <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.CloneAndRemove(System.String)"/> methods to create
            a new <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter"/> with added or removed strings.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.#ctor(Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a filter that for <paramref name="column"/> that exludes entries if their column's untruncated text matches any string in <paramref name="excluded"/>.
            </summary>
            <param name="column">Column used to filter the entries.</param>
            <param name="excluded">List of string used to exclude entries.</param>
            <remarks>
            <para>The string is comparison done using <see cref="P:System.StringComparer.Ordinal"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.#ctor(Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.String[])">
            <summary>
            Create a filter that for <paramref name="column"/> that exludes entries if their column's untruncated text matches any string in <paramref name="excluded"/>.
            </summary>
            <param name="column">Column used to filter the entries.</param>
            <param name="excluded">List of string used to exclude entries.</param>
            <remarks>
            <para>The string comparison is done using <see cref="P:System.StringComparer.Ordinal"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.CloneAndAdd(System.String)">
            <summary>
            Clone this and add <paramref name="newItem"/> to the list of excluded strings in the clone.
            </summary>
            <param name="newItem">New string to add to the excluded list.</param>
            <remarks>
            <para>
            If this already contains <paramref name="newItem"/> then this is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.CloneAndRemove(System.String)">
            <summary>
            Clone this and remove <paramref name="removedItem"/> from the list of excluded strings in the clone.
            </summary>
            <param name="removedItem">New string to remove from the excluded list.</param>
            <remarks>
            <para>
            If this already contains only <paramref name="removedItem"/> then null is returned. If this doesn't contain <paramref name="removedItem"/> then this returned.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by this filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.Excluded">
            <summary>
            Gets the list of strings excluded by the filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.ExcludedCount">
            <summary>
            Gets the number of excluded strings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.ExcludedContains(System.String)">
            <summary>
            Tests to see whether a particular string value is contained in <see cref="P:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.Excluded"/>.
            </summary>
            <param name="value">Value to test.</param>
            <returns>true if <paramref name="value"/> is in the list of excluded strings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ColumnHashSetFilter.Match(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Tests to see if <paramref name="entry"/> matches the filter.
            </summary>
            <param name="entry">Entry to test against the filter.</param>
            <returns>true if the entry matches the filter.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket">
            <summary>
            A helper class that implements <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket"/> for groups that are displayed using a string.
            </summary>
            <remarks>Two different instances of a <see cref="T:EntryBucket"/> that have the same name will be considered equivalent.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.Name">
            <summary>
            Name of the bucket.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.ToolTip">
            <summary>
            ToolTip of the bucket (can be null).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.Comparer">
            <summary>
            String comparison used to compare two different buckets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.#ctor(System.String,System.Object,System.StringComparer,System.Boolean)">
            <summary>
            Constructor for an instance an instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket"/> that is displayed using a string.
            </summary>
            <param name="name">Localized name used to display the group header.</param>
            <param name="tooltip">ToolTip to be displayed over the group's header (can be null).</param>
            <param name="comparer">String comparison used to compare two different groups.</param>
            <param name="expandedByDefault">Whether this bucket is initially expanded.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.TryCreateImageContent(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display the group.</param>
            <returns>true if the group should be displayed using <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.TryCreateStringContent(System.String@)">
            <summary>
            Get the <see cref="T:System.String"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:System.String"/> to display the group.</param>
            <returns>true if the group should be displayed using <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.TryCreateColumnContent(System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement"/> to display the group.</param>
            <returns>true if the group should be displayed using a <see cref="T:System.Windows.FrameworkElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.TryCreateToolTip(System.Object@)">
            <summary>
            Get the tool tip for this group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.IsExpandedByDefault">
            <summary>
            Should this group be expanded by default?.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.PersistExpansionState">
            <summary>
            Should the expansion state of this group persist from session to session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.CompareTo(Microsoft.VisualStudio.Shell.TableControl.IEntryBucket)">
            <summary>
            Compare this to another object <see cref="T:System.IComparable`1"/>.
            </summary>
            <remarks>The default implementation is equivalent to comparing the names.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.StringEntryBucket.Equals(System.Object)">
            <summary>
            Compare this to another object <see cref="T:System.IEquatable`1"/>.
            </summary>
            <remarks>The default implementation is equivalent to comparing the names.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.DataSourceAttribute">
            <summary>
            Attribute on an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/> to restrict the ITableControlEventProcessor it creates to events on entries created by <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>
            whose <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Identifier"/> matches this attribute.
            </summary>
            <remarks>
            <para>The ITableControlEventProcessorProvider can have multiple DataSource attributes.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.DataSourceAttribute.DataSources">
            <summary>
            Return the DataSource identifier associated with this attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.DataSourceTypeAttribute">
            <summary>
            Attribute on an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/> to restrict the ITableControlEventProcessor it creates to events on entries created by <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>
            whose <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> matches this attribute.
            </summary>
            <remarks>
            <para>The ITableControlEventProcessorProvider can have multiple DataSourceType attributes.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs">
            <summary>
            Event arguments for an <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.EntriesChanged"/> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs.VersionNumber">
            <summary>
            Version number of the update.
            </summary>
            <remarks>
            This number is incremented by the table control on every update.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs.AllEntries">
            <summary>
            All entries contained in the table (whether or not they are visible).
            </summary>
            <remarks>
            <para>
            These entries will not be sorted.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs.FilteredAndSortedEntries">
            <summary>
            The filtered and sorted entries in the table.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Create an instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.EntriesChangedEventArgs"/> with the specified version number.
            </summary>
            <param name="versionNumber">Version number of the update.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs">
            <summary>
            Event arguments for an <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.FiltersChanged"/> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs.Key">
            <summary>
            Key name passed to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SetFilter(System.String,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs.OldFilter">
            <summary>
            Filter before the change.
            </summary>
            <remarks>
            <para>
            This will be null if there was no filter associated with <see name="Key"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs.NewFilter">
            <summary>
            Filter after the change.
            </summary>
            <remarks>
            <para>
            This will be null if the filter associated with <see name="Key"/> was removed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter)">
            <summary>
            Create an instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.FiltersChangedEventArgs"/> with the specified key.
            </summary>
            <param name="key">Key name passed to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SetFilter(System.String,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter)"/>.</param>
            <param name="oldFilter">The filter associated with <paramref name="key"/> before the change.</param>
            <param name="newFilter">The filter associated with <paramref name="key"/> after the change..</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket">
            <summary>
            This class is used to group <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.TryCreateImageContent(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display the group.</param>
            <returns>ttrue if the group should be displayed using <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.TryCreateStringContent(System.String@)">
            <summary>
            Get the <see cref="T:System.String"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:System.String"/> to display the group.</param>
            <returns>true if the group should be displayed using <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.TryCreateColumnContent(System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement"/> used to display the group.
            </summary>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement"/> to display the group.</param>
            <returns>true if the group should be displayed using a <see cref="T:System.Windows.FrameworkElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.TryCreateToolTip(System.Object@)">
            <summary>
            Get the tool tip for this group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.IsExpandedByDefault">
            <summary>
            Should this group be expanded by default?.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket.PersistExpansionState">
            <summary>
            Should the expansion state of this group persist from session to session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Split">
            <summary>
            Split the bucket into an equivalent sequence of buckets.
            </summary>
            <returns>null if the buckets can not be split. Otherwise an enumeration of the equivalent buckets.</returns>
            <remarks>
            <para>For example, a bucket that represents the file path "D:\test\project1\project1\resources" might be split into buckets for "D:", "test", "project1", "project1", "resources".</para>
            <para>The buckets will be stiched back together (using <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Merge(Microsoft.VisualStudio.Shell.TableControl.IEntryBucket)"/> as long as the bucket has only a single child.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Merge(Microsoft.VisualStudio.Shell.TableControl.IEntryBucket)">
            <summary>
            Merge two buckets created by <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Split"/> if possible.
            </summary>
            <param name="child">The bucket with which to attempt the merge.</param>
            <returns>null if the buckets cannot be merged. Otherwise return a bucket that is equivalent to the this and <paramref name="child"/>.</returns>
            <remarks>
            <para>Suppose the contents of the table control form the following tree of buckets and errors (where all the buckets except for the root were created by <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Split"/>:</para>
            <code>
                                Root
                     "D:"                 "E:"
              "myproject"            "unittest"  "integrationtests"
              Error1 Error2         Error3      Error4 Error5
            </code>
            <para>
            In this case, will attempt to merge buckets "D:" and "myproject." There will be no attempt to merge "E:" and its children (since it has more than one). If the merge of "D:" and "myproject" succeeds,
            the the resulting tree will look like:
            </para>
            <code>
                Root
                    "D:\myproject"
                        Error1
                        Error2
                    "E:"
                        "unittest"
                            Error3
                        "integrationtests"
                            Error4
                            Error5
            </code>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.Identifier">
            <summary>
            If this bucket should be treated as if it were an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> for purposes of event handling via <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/>, what is the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Identifier"/>
            of the "sorce" that provided it?.
            </summary>
            <remarks>
            <para>Return null if this bucket should not receive events.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.SourceTypeIdentifier">
            <summary>
            If this bucket should be treated as if it were an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> for purposes of event handling via <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/>, what is the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/>
            of the "sorce" that provided it?.
            </summary>
            <remarks>
            <para>Return null if this bucket should not receive events.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.ShowCount">
            <summary>
            Determines whether a number indicating the count of entries in this bucket will be displayed by appending to the bucket grouping header.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.TryGetValue(System.String,System.Object@)">
            <summary>
            Try to get data associated with the bucket.
            </summary>
            <param name="key"></param>
            <param name="content"></param>
            <returns>true if there was data associated with the key; false otherwise.</returns>
            <remarks>
            <para>This method will, generally, use the same keys that <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> uses.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.IEntryFilter">
            <summary>
            Interface passed to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SetFilter(System.String,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter)"/> to filter entries.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IEntryFilter.Match(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Return true if the specified <paramref name="entry"/> satisfies the filter.
            </summary>
            <remarks>
            This method must be callable from any thread and the criteria used to evaluate <paramref name="entry"/> must be immutable.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition">
            <summary>
            Describes a column of data.
            </summary>
            <remarks>
            Required MEF metadata: Name.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.Name">
            <summary>
            Unique identifier of the column.
            </summary>
            <remarks>
            <para>
            This value must match the value provided by the Name attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.TryCreateImageContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> as an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.
            </summary>
            <remarks>
            <para>
            The default implementation fails to return an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.TryCreateStringContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> as a string.
            </summary>
            <remarks>
            <para>
            The default implementation is to get the value using <see cref="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.Name"/> as a key and, if it is a string, display that.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.TryCreateColumnContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> as an <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <remarks>
            <para>
            The default implementation fails to return a <see cref="T:System.Windows.FrameworkElement"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.TryCreateToolTip(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Object@)">
            <summary>
            Get the tool tip for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            </summary>
            <remarks>
            <para>
            The default implementation returns false and sets <param name="toolTip"/> to null.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.CompareContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Compare the sort order of two entries of the data in one column of two different entries.
            </summary>
            <remarks>
            <para>
            The default comparisons does a <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> using the column name as the key. If the left and right values are strings, then the strings are compared.
            If they are <see cref="T:System.IComparable"/>s and the same underlying type, then <see cref="M:System.IComparable.CompareTo(System.Object)"/> is used. Otherwise we get the string content for this column and compare those.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.CreateBucketForEntry(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket"/> associated this this column for this entry.
            </summary>
            <param name="entry">Entry for which to get the bucket.</param>
            <returns>The associated bucket. This can be null.</returns>
            <remarks>
            <para>The identity of a bucket is based on object.GetHashCode() and object.Equals() two entries that return different objects for their bucket will be grouped together as long as the
            two buckets are equivalent.</para>
            <para>This method is unused at the moment.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsFilterable">
            <summary>
            Indicated whether the column can be filtered using the default UI.
            </summary>
            <remarks>
            If this returns false then there will be no built-in UI for letting the user filter the column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.Comparer">
            <summary>
            The <see cref="T:System.StringComparer"/> used to sort and compare entries in this column.
            </summary>
            <remarks>
            This value is used for the filtering, sorting and grouping.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsSortable">
            <summary>
            Indicates whether the colimn can be sorted using the default UI.
            </summary>
            <remarks>
            If this returns false then there will be no built-in UI for letting the user sort the column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.DefaultVisible">
            <summary>
            Indicates whether the column is visible by default.
            </summary>
            <remarks>
            If this returns false then the column will be hidden the first time there is data in the table that could be shown using this column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsHideable">
            <summary>
            Indicates whether the user can hide the column using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsResizable">
            <summary>
            Indicates whether the user can change the column's width using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsMovable">
            <summary>
            Indicates whether the user can move the column using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.IsCopyable">
            <summary>
            Indicates whether the user can copy the column's content using the default copy command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.FilterPresets">
            <summary>
            The strings that always exist as filterable items for this list.
            </summary>
            <remarks>For example, if you want to always show "Errors", "Warnings" and "Messages" as filtering options even if there are no errors then return new List.<string>(3){"Errors", ....}.</string></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.DisplayName">
            <summary>
            Localized name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.HeaderName">
            <summary>
            Localized name used when adding headers to entries copied from the control to the clipboard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.DisplayImage">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> shown for this column in the header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.MinWidth">
            <summary>
            Minumum width of the column (in pixels).
            </summary>
            <remarks>The minimum width is 22 pixels (so that there is space to display the sorting and filtering UI).</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.MaxWidth">
            <summary>
            Maximum width of the column (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.ColumnDefinition">
            <summary>
            Gets the width of the item in the table's header (which is inherited by the corresponding columns of the entries).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition.TextWrapping">
            <summary>
            Indicates whether the user can copy the column's content should be wrapped if it is too large to fit.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition2.TryGetFilterItems(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Get the filterable items for the column.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition2.DefaultWidth">
            <summary>
            Gets the default width associated with a column.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager">
            <summary>
            Manager for the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/>s used by any instance of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            <code>
            [Import]
            internal ITableColumnDefinitionManager tableColumnDefinitionManager  { get; private set; }
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager.GetColumnDefinition(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> associated with <paramref name="columnName"/>.
            </summary>
            <returns>The corresponding definition or null if no definition is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager.AddColumnDefinition(Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition)">
            <summary>
            Add a new <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/>.
            </summary>
            <param name="newDefinition"><see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> to add.</param>
            <returns>true if the <paramref name="newDefinition"/> was added (adding a <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> with the same name
            as an existing <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> will fail).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager.RemoveColumnDefinition(System.String)">
            <summary>
            Remove an existing <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/>.
            </summary>
            <param name="definitionToRemove">Name of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> to remove.</param>
            <returns>true if the definition corresponding to <paramref name="definitionToRemove"/> was removed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor">
            <summary>
            Interface used to implement event handlers for UI actions in the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/> are created by <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/>, which is a MEF export.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseLeftButtonDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseLeftButtonDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseRightButtonDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseRightButtonDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseLeftButtonUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseLeftButtonUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseRightButtonUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseRightButtonUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseUp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseDown(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseMove(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseMove(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseWheel(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseWheel(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseEnter(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseEnter(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessMouseLeave(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessMouseLeave(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessDragLeave(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessDragLeave(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessDragOver(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessDragOver(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessDragEnter(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessDragEnter(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessDrop(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event before the default handler.
            </summary>
            <param name="e">
            <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessDrop(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessQueryContinueDrag(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessQueryContinueDrag(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessGiveFeedback(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessGiveFeedback(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
            <param name="entry">The table entry raising the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessNavigate(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs)">
            <summary>
            Handles a Navigate event before the default handler.
            </summary>
            <param name="entry">The table entry raising the event.</param>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessNavigate(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs)">
            <summary>
            Handles a Navigate event after the default handler.
            </summary>
            <param name="entry">The table entry raising the event.</param>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessNavigateToHelp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs)">
            <summary>
            Handles a Navigate event before the default handler.
            </summary>
            <param name="entry">The table entry raising the event.</param>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessNavigateToHelp(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs)">
            <summary>
            Handles a Navigate event after the default handler.
            </summary>
            <param name="entry">The table entry raising the event.</param>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessSelectionChanged(Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs)">
            <summary>
            Handles a SelectionChanged event before the default handler.
            </summary>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessSelectionChanged(Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs)">
            <summary>
            Handles a SelectionChanged event after the default handler.
            </summary>
            <param name="e">A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/> describing the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.KeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider">
            <summary>
            Represents an exportable MEF component able to create <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/> a given <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(ITableControlEventProcessorProvider))]
             [DataSourceType(StandardTableDataSources.ErrorTableDataSourceString)]
             [DataSource(StandardTableDataSources.AnyDataSourceString)]
             [ManagerIdentifier(StandardTables.ErrorsTableString)]
             [Name("Some error list event processor")]
             [Order(Before=Priority.Default)]               // From Microsoft.VisualStudio.Text.Classification.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider.GetAssociatedEventProcessor(Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl)">
            <summary>
            Creates <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/> for a given <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
            <param name="tableControl">The <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> for which to create the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/>.</param>
            <returns>The created <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor"/>. The value may be null if this
            <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/> does not wish to participate in the current context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle">
            <summary>
            A wrapper for an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> or a "virtual" entry created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.TryGetEntry(Microsoft.VisualStudio.Shell.TableManager.ITableEntry@)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> associated with this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            </summary>
            <returns>true if this was created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.TryGetSnapshot(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot@,System.Int32@)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> and index associated with this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            </summary>
            <returns>true if this was created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> and that snapshot has been pinned (<see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.PinSnapshot"/>).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.TryGetFactory(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory@,System.Int32@,System.Int32@)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>, version number and index associated with this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            The entry's snapshot will be returned if it is being held by the table control.
            </summary>
            <returns>true if this was created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> that, in turn, was created by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.PinSnapshot">
            <summary>
            Pin the snapshot for this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> used to create this entry or null if it or its equivalent no longer exists.</returns>
            <remarks>
            <para>All calls to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.PinSnapshot"/> should be matched by calls to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.UnpinSnapshot"/>.</para>
            <para>This will return null (and have no effect) on handles created from <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s.</para>
            <para>If the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> used to create this handle was directly added to the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>, then
            this method will return that snapshot (but have no effect otherwise).</para>
            <para>If the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> used to create this handle is managed by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>, then this method will return its cached snapshot if
            still exists or it will ask the factory to recreate it if it does not. The factory may not be able to recreate the snapshot and, in that case, this method will return null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.UnpinSnapshot">
            <summary>
            Unpin the snapshot for this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/>.
            </summary>
            <remarks>
            <para>All calls to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.UnpinSnapshot"/> should be matched with an earlier call to <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.PinSnapshot"/>.</para>
            <para>This will have no effect on handles created from <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s or ones created from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> that was directly added to an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>.</para>
            <para>If the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> used to create this handle is managed by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>, then this method will decrement is "pinned" count and, if that count goes
            to zero, release its cached snapshot.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.EnsureVisible">
            <summary>
            Ensure that the entry is visible in the table control, scrolling the contents of the table control if needed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.IsSelected">
            <summary>
            Gets or sets whether the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with is selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.AreDetailsShown">
            <summary>
            Gets or sets whether details of the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with are being shown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.CanShowDetails">
            <summary>
            Gets whether the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with is selected can show details.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.HasVerticalContent">
            <summary>
            Gets whether the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with has vertical content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.NavigateTo(System.Boolean)">
            <summary>
            Navigates to the data the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with represents.
            </summary>
            <remarks>
            <para>Calling this is equivalent to the user initiating an navigation action from the table control itself.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.NavigateToHelp">
            <summary>
            Navigates to the help link the entry this <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle"/> is associated with represents.
            </summary>
            <remarks>
            <para>Calling this is equivalent to the user initiating an navigate to help action from the table control itself.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.IsVisible">
            <summary>
            Is the entry visible in the table control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions">
            <summary>
            Overload class for getting typed data from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> and <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions.TryCreateImageContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Helper to get the image content (if any) for a particular entry &amp; column.
            </summary>
            <remarks>
            This code first checks to see whether the entry provides that data directly and, if not, uses the converter associated with the column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions.TryCreateStringContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Helper to get the string content (if any) for a particular entry &amp; column.
            </summary>
            <remarks>
            This code first checks to see whether the entry provides that data directly and, if not, uses the converter associated with the column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions.TryCreateColumnContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Helper to get the content (if any) for a particular entry &amp; column.
            </summary>
            <remarks>
            This code first checks to see whether the entry provides that data directly and, if not, uses the converter associated with the column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryHandleExtensions.TryCreateToolTip(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition,System.Object@)">
            <summary>
            Helper to get the tool tip (if any) for a particular entry &amp; column.
            </summary>
            <remarks>
            This code first checks to see whether the entry provides that data directly and, if not, uses the converter associated with the column.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl">
            <summary>
            Interface for displaying and managing a data as a table.
            </summary>
            <remarks>
            <para>All methods on this interface, unless otherwise marked, can be called from any thread.</para>
            <para>All events raised by this interface will be raised on the same thread that created the table control.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Manager">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> that provides the data for this control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Control">
            <summary>
            The WPF control that displays the data from the activated <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SubscribeToDataSource(Microsoft.VisualStudio.Shell.TableManager.ITableDataSource)">
            <summary>
            Start subscribing to the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s produced by a <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.
            </summary>
            <remarks>
            <para>A table control can only have a single subscription to any one <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/> (though it can simultaneously subscribe to different sources).</para>
            <para>TableControls created with autosubscribe = true should not call this method.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.UnsubscribeFromDataSource(Microsoft.VisualStudio.Shell.TableManager.ITableDataSource)">
            <summary>
            Stop subscribing to the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.
            </summary>
            <remarks>
            <para>TableControls created with autosubscribe = true should not call this method.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.AutoSubscribe">
            <summary>
            Indicates whether this table control will automatically subscribe to all data sources added to its <see cref="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Manager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SetFilter(System.String,Microsoft.VisualStudio.Shell.TableControl.IEntryFilter)">
            <summary>
            Set the filter for the specified <paramref name="key"/>.
            </summary>
            <returns>The previous filter for <paramref name="key"/> if one exists or null if there is no corresponding filter.</returns>
            <remarks>
            <para>
            Use <paramref name="newFilter"/> == null to clear the filter associated with the key.
            </para>
            <para>
            Calling this method will raise the <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.FiltersChanged"/> event if the filter is actually changed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.GetFilter(System.String)">
            <summary>
            Get the filter for the specified <paramref name="key"/> if it exists or null if there is no corresponding filter.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.FiltersChanged">
            <summary>
            Raised whenever the table's filter is changed via SetFilter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SortFunction">
            <summary>
            Gets/sets the default sort function associated with the table control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.ColumnStates">
            <summary>
            A snapshot of the current column states.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SelectionMode">
            <summary>
            Gets/sets the selection mode of the table control.  Default is Extended (multi-select with modifier).
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.PreEntriesChanged">
            <summary>
            Raised before the control entries have changed.
            </summary>
            <remarks>
            <para>It is guaranteed to be followed
            by an EntriesChanged event.</para>
            <para>This event will always be raised on the thread that created the table control.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.EntriesChanged">
            <summary>
            Raised (on the thread that created the control) after the controls entries have changed.
            </summary>
            <remarks>
            <para>This event will always be raised on the thread that created the table control.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.ColumnDefinitionManager">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinitionManager"/> use by this (and every other) <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Entries">
            <summary>
            Gets the entries displayed in the control.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SelectedEntries">
            <summary>
            Gets or sets entries selected in the control.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SelectedEntry">
            <summary>
            Gets the selected entry in the table control. Returns null if no items are selected. If multiple items are selected then
            the we return whatever item is the underlying WPF controls considers to be the selected item.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SelectedOrFirstEntry">
            <summary>
            Gets the selected entry in the table control or, if no entry is selected the first entry.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.SelectAll">
            <summary>
            Selects all entries.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.UnselectAll">
            <summary>
            Clears all the selection.
            </summary>
            <remarks>
            <para>
            This method can only be called from the thread that created the table control.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.RefreshUI">
            <summary>
            Force the elements in the table to be redrawn (because, for example, the user changed a setting that changes the way file names are displayed).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.ForceUpdateAsync">
            <summary>
            Force the table control to begin an update (which may not happen immediately).
            </summary>
            <returns>The version number of the pending update.</returns>
            <remarks>
            <para>There should be no need to call this method (updates will happen automatically if there is a change). It is exposed here
            primarily to simplify testing.</para>
            <para>To avoid deadlocks you should use something similar to the following when calling this method:
            <code>
              var r =  ThreadHelper.JoinableTaskFactory.Run&lt;EntriesChangedEventArgs&gt;(async delegate
                        {
                          return await this.TableControl.ForceUpdateAsync();
                        });
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.IsDataStable">
            <summary>
            Indicates whether or not the data in the control is stable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.NavigationBehavior">
            <summary>
            Gets or sets the navigation behavior on a selected entry.
            </summary>
            <remarks>See <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior"/> for detail.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.KeepSelectionInView">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether or not to keep selected entry in the visible viewport after data update.
            </summary>
            <remarks>
            <para>
            If this value is <c>true</c>, the first selected entry will always be kept in viewport after data update.
            Scrolling may happen in order to keep the selection in viewport.
            </para>
            <para>
            if this value is <c>false</c>, the previouly selected entry may be out of viewport after data update
            and the control will not automatically scroll it back into viewport.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.ShowGroupingLine">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether or not to show a veritcal line next to entries when grouping is applied.
            </summary>
            <remarks>
            <para>This value controls wheter a vertical line next to entries will be displayed if entries are grouped.</para>
            <para> If there is no grouping in the table, this value does not have any effect. The vertical line does not show in this case.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.DataStabilityChanged">
            <summary>
            Raised when the data stability state was changed. Check <see cref="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.IsDataStable"/> for the new data stability state.
            </summary>
            <remarks>
            <para>This event will always be raised on the thread that created the table control.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.GroupingsChanged">
            <summary>
            Raised when there is any grouping changed. This event is always raised on the thread that creatad the table control.
            </summary>
            <remarks>
            When this event is raised, you can get <see cref="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.ColumnStates"/>
            and then check <see cref="F:Microsoft.VisualStudio.Shell.TableControl.ColumnState2.GroupingPriority"/> (by casting <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState"/> to <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState2"/> )
            to determine what are the new groupings.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.RaiseDataUnstableChangeDelay">
            <summary>
            Delay for raising <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.DataStabilityChanged"/> event when data in the control becomes unstable.
            </summary>
            <remarks>
            <para>Consumer can use this property to control the delay for raising the <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.DataStabilityChanged"/> event when data in the control becomes unstable.</para>
            <para>By default, there is no delay to raise such event. Setting this property to <see cref="F:System.TimeSpan.Zero"/> also disables the delay.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.GetAllFilters">
            <summary>
            Get all of the table control's filters.
            </summary>
            <returns>
            An enumeration of the names and corresponding filters in the table control.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.SetColumnStates(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.TableControl.ColumnState})">
            <summary>
            Set the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState"/> for the indicated columns.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.SelectedItemActiveBackground">
            <summary>
            The background for selected items when the control has focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.SelectedItemActiveForeground">
            <summary>
            The foreground for the selected items when the control has focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.SelectedItemInactiveBackground">
            <summary>
            The background for selected items when the control is not focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl2.SelectedItemInactiveForeground">
            <summary>
            The foreground for the selected items when the control is not focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl3.TableControlBackground">
            <summary>
            The background for items when the control is not selected nor focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl3.TableControlForeground">
            <summary>
            The foreground for items when the control is not selected nor focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4.DoColumnsAutoAdjust">
            <summary>
            Do columns automatically adjust their widths to fill the available space for the table.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4.DoSortingAndGroupingWhileUnstable">
            <summary>
            Does the table control sort and group while any <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>s are unstable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4.UpdateDelayWhileStable">
            <summary>
            Delay between a change in the data and the start of an update when all <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>s are stable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl4.UpdateDelayWhileUnstable">
            <summary>
            Delay between a change in the data and the start of an update when any <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>s are unstable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot">
            <summary>
            Extension of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> that allows an entry provider to override the default behavior for what gets displayed for an entry in a particular column.
            </summary>
            <remarks>
            <para>
            The TryCreate...() methods for entries are called before using the equivalent method from the column definition.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateImageContent(System.Int32,System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> for the virtual entry at position <paramref name="index"/> and <paramref name="columnName"/>.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateStringContent(System.Int32,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the <see cref="T:System.String"/> for the virtual entry at position <paramref name="index"/> and <paramref name="columnName"/>.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.String"/>.</param>
            <param name="truncatedText">Truncate the text for fit on a single line.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.String"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateColumnContent(System.Int32,System.String,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement"/> for the virtual entry at position <paramref name="index"/> and <paramref name="columnName"/>.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.CanCreateDetailsContent(System.Int32)">
            <summary>
            Indicates whether the virtual entry at position <paramref name="index"/> has details content that can be displayed.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <returns>true if the entry has content that could be displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateDetailsContent(System.Int32,System.Windows.FrameworkElement@)">
            <summary>
            Get the details content for the virtual entry <paramref name="index"/> so that it can be displayed in the table control.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="expandedContent"><see cref="T:System.Windows.FrameworkElement"/> to display below the entry in the table control.</param>
            <returns>true if <paramref name="expandedContent"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateDetailsStringContent(System.Int32,System.String@)">
            <summary>
            Get the string equivalent of the details content for the virtual entry <paramref name="index"/> (used for search and copy and paste).
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="content">The string equivalent to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot.TryCreateToolTip(System.Int32,System.String,System.Object@)">
            <summary>
            Get the tooltip for the entry and <paramref name="columnName"/>.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the image.</param>
            <param name="toolTip">The object to display as a tool tip for the column.</param>
            <returns>true if <paramref name="toolTip"/> should be used.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry">
            <summary>
            Extension of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry"/> that allows an entry provider to override the default behavior for what gets displayed for an entry in a particular column.
            </summary>
            <remarks>
            <para>
            The TryCreate...() methods for entries are called before using the equivalent method from the column definition.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateImageContent(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> for the entry and <paramref name="columnName"/>.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateStringContent(System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the <see cref="T:System.String"/> for the entry and <paramref name="columnName"/>.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.String"/>.</param>
            <param name="truncatedText">Truncate the text for fit on a single line.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.String"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateColumnContent(System.String,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement"/> for the entry and <paramref name="columnName"/>.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement"/> to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.CanCreateDetailsContent">
            <summary>
            Does the entry have details content that can be displayed.
            </summary>
            <returns>true if the entry has content that could be displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateDetailsContent(System.Windows.FrameworkElement@)">
            <summary>
            Get the details content for the entry so that it can be displayed in the table control.
            </summary>
            <param name="expandedContent"><see cref="T:System.Windows.FrameworkElement"/> to display below the entry in the table control.</param>
            <returns>true if <paramref name="expandedContent"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateDetailsStringContent(System.String@)">
            <summary>
            Get the string equivalent of the details content for the entry (used for search and copy and paste).
            </summary>
            <param name="content">The string equivalent to display in the column.</param>
            <returns>true if <paramref name="content"/> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry.TryCreateToolTip(System.String,System.Object@)">
            <summary>
            Get the tooltip for the entry and <paramref name="columnName"/>.
            </summary>
            <param name="columnName">Name of the column for which to get the image.</param>
            <param name="toolTip">The object to display as a tool tip for the column.</param>
            <returns>true if <paramref name="toolTip"/> should be used.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.ManagerTypeAttribute">
            <summary>
            Attribute on an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/> to restrict the ITableControlEventProcessor it creates to events on entries provided through an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/>
            whose <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier"/> matches this attribute.
            </summary>
            <remarks>
            <para>The ITableControlEventProcessorProvider can have multiple ManagerType attributes.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableColumnAttribute">
            <summary>
            An attribute applied on <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> to specify MEF metadata for the column.
            </summary>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition"/> can have only one <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableColumnAttribute"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnAttribute.IsDominant">
            <summary>
            Gets or sets a value indicating whether this is a dominant column in the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/>.
            </summary>
            <remarks>
            <para>A <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> may have multiple dominant columns.</para>
            <para> Dominant columns combined together provide content for UI Automation:</para>
            <list type="bullet">
            <item>
            If the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> has only one single dominant column:
            the text content of the column for selected entry is used as automation name for screen readers;
            the tooltip for the column is displayed when using keyboard shortcut to invoke the tooltip for the entry.
            </item>
            <item>
            If the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> has multiple dominant columns, text content from all dominant columns are combined
            for screen readers to read out and for keyboard invoked tooltip.
            </item>
            </list>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions" -->
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.Line">
            <summary>
            The column used to display the line number associated with the entry.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Line"/> key name in an entry.
            </para>
            <para>
            The value displayed in the column is one more than the entry's <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Line"/> value.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.Column">
            <summary>
            The column used to display the column number associated with the entry.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Column"/> key name in an entry.
            </para>
            <para>
            The value displayed in the column is one more than the entry's <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Column"/> value.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.DocumentName">
            <summary>
            The column used to display the document name associated with the entry.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> key name in an entry.
            </para>
            <para>This column displays only the file name <see cref="M:System.IO.Path.GetFileName(System.String)"/> in the column.</para>
            <para>The full path is displayed as a tool tip on the column (and is used when copying the column's contents).</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.Text">
            <summary>
            The column used to display the descriptive text associated with the entry.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> and <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.FullText"/> key names in an entry.
            </para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.FullText"/> value exists then <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> is displayed in the column and the full text is used as a tool tip and when copying the contents.</para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.FullText"/> value doesn't exist then <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> is displayed in the column and when copying the contents and there is no tool tip. </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.DetailsExpander">
            <summary>
            The column used to display to indicate whether or not the entry has additional content associated with it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorCode">
            <summary>
            Column used to display the entry's error code (e.g. "CS2912").
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCode"/> and <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCodeToolTip"/> key names in an entry.
            </para>
            <para>
            This column displays as a <see cref="T:System.Windows.Documents.Hyperlink"/> in the table. The <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCode"/> is the hyperlink's text and the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCodeToolTip"/> is the tooltip
            displayed when hovering over the link.
            </para>
            <para>Clicking on the hyperlink is equivalent to navigating to the entry's associated help information (see <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle.NavigateToHelp"/>).</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorCategory">
            <summary>
            Column used to display the entry's error category (e.g. "Compiler").
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCategory"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSource">
            <summary>
            Column used to display the entry's error source (e.g. "Build").
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.BuildTool">
            <summary>
            Column used to display the build tool that generated the error (e.g. "FxCop").
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.BuildTool"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSeverity">
            <summary>
            Column used to display the entry's severity (based on either StandardTableKeyNames.ErrorSeverityImage or StandardTableKeyNames.ErrorSeverity).
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverity"/> or <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverityImage"/> key name in an entry.
            </para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverityImage"/> is specified then that <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> displayed in the column. Otherwise a moniker based on <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverity"/> is used.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.Priority">
            <summary>
            Column used to display the entry's priority.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Priority"/> or <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.PriorityImage"/> key name in an entry.
            </para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.PriorityImage"/> is specified then that <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> displayed in the column. Otherwise a moniker based on <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Priority"/> is used.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ProjectName">
            <summary>
            Column used to display the entry's project (e.g. "ConsoleApplication1").
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectName"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ProjectRank">
            <summary>
            Column used to display the entry's project rank.
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectGuid"/> to determine the project's rank.
            </para>
            <para>
            Projects with a rank 1 do not depend on any other projects. Projects with a rank of 2 depend on one or more projects with a rank of 1, etc..
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorRank">
            <summary>
            Column used to display the entry's error rank (<see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/> for more details).
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.SuppressionState">
            <summary>
            Column used to display the entry's suppression status (<see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SuppressionState"/> for more details).
            </summary>
            <remarks>
            <para>
            This column uses the <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SuppressionState"/> key name in an entry.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.Path">
            <summary>
            The column used to display the file path of an entry.
            </summary>
            <remarks>
            <para>This column uses <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.Path"/> key name in an entry.</para>
            <para>This column displays only the directory information <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.Definition">
            <summary>
            The column used to display the definition associated with a symbol reference.
            </summary>
            <remarks>
            This column uses <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.Definition"/> key name in an entry.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.NameSpace">
            <summary>
            The column used to dispaly the namespace associated with an entry.
            </summary>
            <remarks>
            This column uses <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.NameSpace"/> key name in an entry.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.LineText">
            <summary>
            The column used to display the line of code associated with an entry.
            </summary>
            <remarks>
            <para>If the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.TextInlines"/> key name is specified, then that will be used to generate the visual for the column's content.</para>
            <para>The <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> key name is used for search and, if the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.TextInlines"/> key name is not specified, to generate the column's visual.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.Extension">
            <summary>
            The column used to display the extension of a file.
            </summary>
            <remarks>
            This column uses <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.DisplayPath"/> (if specified, or <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> if not) to get the
            entry's file name and then gets the extension from that.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions2.SymbolKind">
            <summary>
            The column used to display the kind of a symbol.
            </summary>
            <remarks>
            This column uses <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SymbolKind"/> key name in an entry.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.StandardTableControlEventProcessors">
            <summary>
            Names of pre-defined event processors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableControlEventProcessors.Default">
            <summary>
            Default Table Control event processor which is implemented in built-in box.
            </summary>
            <remarks>
            <para>All custom event processors should be ordered before this default one.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableControlEventProcessors.ErrorList">
            <summary>
            Event processor for Table Control in ErrorList and TaskList windows (implemented in ErrorList Package).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.Path">
            <summary>
            Returns the path of the file containing the error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.NameSpace">
            <summary>
            Returns the namespace containing the error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.LineText">
            <summary>
            Returns a plain text for an error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.TextInlines">
            <summary>
            Returned a list of <see cref="T:System.Windows.Documents.Inline"/> used to display formatted text for an error or symbol.
            </summary>
            <remarks>Expected return type is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.Definition">
             <summary>
             Returns the definition associated with a symbol reference.
             </summary>
             <remarks>
             <para>The expected return type is <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2"/>.</para>
             <para>The returned <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.TryGetValue(System.String,System.Object@)"/> should return values for the following keys:
             <code>
                 StandardTableKeyNames.Text              Text associated with the defintion.
                 StandardTableKeyNames.DocumentName      Full path of the document containing the definition.
                 StandardTableKeyNames.Line              Line (0-based) of the defintion.
                 StandardTableKeyNames.Col               Column (0-based) of the defintion.
            
                 StandardTableKeyNames2.TextInlines     An enumeration of <see cref="T:System.Windows.Documents.Inline"/> to display formated text as part of the symbol definition [optional].
                 StandardTableKeyNames2.DefinitionIcon  An <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display with the symbol definition's text {optional].
             </code>
             </para>
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.DefinitionIcon" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.ProjectNames" -->
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.HelpText">
            <summary>
            Returns a help text associated with the table entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            <para>This text is used to set AutomationProperties.HelpText on the associated entry.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.DisplayPath">
            <summary>
            The full displayed path for the entry.
            </summary>
            <remarks>
            <para>
             <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> is the path used to navigate to the entry. <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.DisplayPath"/> is only used for what is displayed to the end user. If this is not set, then
             <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> is displayed to the end user.
             </para>
             <para>
             The displayed path does not have to correspond to a valid location but should follow the standard conventions with respect to disk and directory separators.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.SymbolKind">
            <summary>
            The symbol kind associated with the entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs">
            <summary>
            Provides data about a table entry navigation event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs.Handled">
            <summary>
            Indeicates whether or not the event has been handled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs.#ctor">
            <summary>
            Creates new instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryEventArgs"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs">
            <summary>
            Provides data about a table entry navigation event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs.IsPreview">
            <summary>
            Indicates whether the navigation should open the document in the preview tab.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs.ShouldActivate">
            <summary>
            Indicates whether the navigation should activate document containing the entry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/>.
            </summary>
            <param name="isPreview">Indicates whether the navigation should open the document in the preview tab.</param>
            <remarks>The document containing the entry will be activated if <paramref name="isPreview"/> is false.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigateEventArgs"/>.
            </summary>
            <param name="isPreview">Indicates whether the navigation should open the document in the preview tab.</param>
            <param name="shouldActivate">ndicates whether the navigation should activate document containing the entry.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior">
            <summary>
            Specifies the possible enumeration values that controls the navigation behavior on entries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior.PreferPreview">
            <summary>
            Opens target document in preview tab if possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior.AcceptsSingleClick">
            <summary>
            Accepts single-click to invoke navigation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior.AcceptsDoubleClick">
            <summary>
            Accepts double-click to invoke navigation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior.AcceptsEnter">
            <summary>
            Accepts Enter keppress to invoke navigation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableEntryNavigationBehavior.AcceptsUpDownKeys">
            <summary>
            Accepts up and down arrow keypress to invoke navigation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PreprocessSelectionChanged(Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs)"/>
            and <see cref="M:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor.PostprocessSelectionChanged(Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs)"/> events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.#ctor(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs"/> class.
            </summary>
            <param name="e">Original <see cref="F:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.SelectionChangedEventArgs"/> instance corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.SelectionChangedEventArgs">
            <summary>
            The <see cref="F:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.SelectionChangedEventArgs"/> that initiated this event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.AddedEntries">
            <summary>
            Gets a list that contains the items that were selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs.RemovedEntries">
            <summary>
            Gets a list that contains the items that were unselected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.SuppressionState">
            <summary>
            Value that indicates whether an error has been suppressed.
            </summary>
            <remarks>
            <para>
            Base type for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)"/> using the
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SuppressionState"/> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of these values in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            <para>
            Note that "suppressed" errors are still visible but they are filtered out by default.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.SymbolReferenceKinds">
            <summary>
            Value that indicate the kind of a symbol.
            </summary>
            <remarks>
            <para>
            Base type for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)"/> using the
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SymbolKind"/> key.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ErrorRank">
            <summary>
            Value that indicates the rank of an in the error list (errors with a lower rank are, by default, displayed before errors with a higher rank).
            </summary>
            <remarks>
            <para>
            Base type for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)"/> using the
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of these values in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ErrorSource">
            <summary>
            Value that indicates the source of an error in the error list.
            </summary>
            <remarks>
            <para>
            Base type for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)"/> using the
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource"/> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of these values in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.ErrorSource.Build">
            <summary>
            Used to indicate any error generated by an explicit build command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.ErrorSource.Other">
            <summary>
            Used to indicate any error generated from any compilation process that was not explicitly invoked by the end-user (e.g. in response to typing a character).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink">
            <summary>
            Class used to consume data provided by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/> can have multiple subscribers and each subscriber will have its own <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.IsStable">
            <summary>
            Indicates whether the results reported to the sink are stable.
            </summary>
            <remarks>
            <para>This property should be set to false whenever the source supplying the sink is likely to be posting changes frequently. It should be set to true when no changes are expected. For example, setting this to false
            at the start of a build and to true when the build has completed.</para>
            <para>This flag has no effect of the behavior of the sink itself but the table control displaying data associated with the sink may display some type of "working" UI to indicate that
            the results are likely to change.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.AddEntries(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry},System.Boolean)">
            <summary>
            Add the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s.
            </summary>
            <param name="newEntries">new entries to be added.</param>
            <param name="removeAllEntries">if true, remove all pre-existing entries.</param>
            <remarks>
            <para>
            <paramref name="newEntries"/> must be immutable/callable from any thread.
            </para>
            <para>
            In general, any call to an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/> will not take effect immediately. Consumers may
            batch changes up and process them, after a delay, on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveEntries(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry})">
            <summary>
            Remove the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s.
            </summary>
            <remarks><paramref name="oldEntries"/> must be immutable/callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.ReplaceEntries(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry})">
            <summary>
            Remove <paramref name="oldEntries"/> and add <paramref name="newEntries"/>.
            </summary>
            <remarks><paramref name="oldEntries"/> and <paramref name="newEntries"/> must be immutable/callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveAllEntries">
            <summary>
            Remove all <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s previously added to the sink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.AddSnapshot(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot,System.Boolean)">
            <summary>
            Add the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>.
            </summary>
            <remarks><paramref name="newSnapshot"/> must be immutable/callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveSnapshot(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot)">
            <summary>
            Remove the specified snapshot.
            </summary>
            <remarks><paramref name="oldSnapshot"/> must be immutable/callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveAllSnapshots">
            <summary>
            Remove all <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>s that had previously been added to the sink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.ReplaceSnapshot(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot,Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot)">
            <summary>
            Remove <paramref name="oldSnapshot"/> and add <paramref name="newSnapshot"/>.
            </summary>
            <remarks><paramref name="oldSnapshot"/> and <paramref name="newSnapshot"/> must be immutable/callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.AddFactory(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory,System.Boolean)">
            <summary>
            Add the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>.
            </summary>
            <remarks><paramref name="newFactory"/> must be callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveFactory(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory)">
            <summary>
            Remove the specified <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>.
            </summary>
            <remarks><paramref name="oldFactory"/> must be callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.ReplaceFactory(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory,Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory)">
            <summary>
            Remove <paramref name="oldFactory"/> and add <paramref name="newFactory"/>.
            </summary>
            <remarks><paramref name="oldFactory"/> and <paramref name="newFactory"/> must be callable from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.FactorySnapshotChanged(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory)">
            <summary>
            Tell the sink that the <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory.GetCurrentSnapshot"/> for <paramref name="factory"/> has changed.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/> that has a new <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>. This can be null, which indicates one or more factories have changed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.RemoveAllFactories">
            <summary>
            Remove all <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/>s that had previously been added to the sink.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource">
            <summary>
            A source for data given to an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/>.
            </summary>
            <remarks>
            <para>
            All methods on this interface can be called from either the main thread or a background thread.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier">
            <summary>
            Identifier that describes the type of entries provided by this source (e.g. <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.CommentTableDataSource"/>).
            </summary>
            <remarks>
            <para>Different sources can have the same identifier (e.g. there could be multiple sources of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.ErrorTableDataSource"/>).</para>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Identifier">
            <summary>
            Unique identifier of this data source.
            </summary>
            <remarks>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.DisplayName">
            <summary>
            Localized name to identify the source in any UI displayed to the user. Can be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Subscribe(Microsoft.VisualStudio.Shell.TableManager.ITableDataSink)">
            <summary>
            Subscribe to <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s created by this data source.
            </summary>
            <param name="sink">Contains methods called when the entries provided by the source change.</param>
            <returns>A key that controls the lifetime of the subscription. The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/> must continue to provide updates until either the key is disposed
            or the source is removed from the table (which will, as a side-effect, cause the key to be disposed of).</returns>
            <remarks>
            <para>If, when the call is made to subscribe to a <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>, the source already has entries, then the source needs to add these entries using <paramref name="sink"/>. It can make the call to add the entries
            before returning from the <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Subscribe(Microsoft.VisualStudio.Shell.TableManager.ITableDataSink)"/> call.</para>
            <para>A <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/> can have multiple, simultaneous subscribers (and each subscriber will have its own <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot">
            <summary>
            An abstraction for a fixed set of <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>s.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> and its virtual entries must be immutable and callable from any thread. The one exception is that the snapshot's Dispose() method will be called
            when the snapshot is no longer being used (at which point there should not be any calls to get data from the snapshot or its entries).
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.Count">
            <summary>
            Number of entries in this snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.VersionNumber">
            <summary>
            Get the version number associated with the snapshot.
            </summary>
            <remarks>
            <para>This property is only used by <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> created by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/> and, in that case, the VersionNumbers must be different if the contents are different.</para>
            <para>The VersionNumber should always be >= 0 with the exception that an empty snapshot's VersionNumber can (but does not have to) be -1.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.StartCaching">
            <summary>
            Hint to the snapshot that there will be a lot of access to the snapshot's data.
            </summary>
            <remarks>
            <para>
            The model for using and releasing entries from snapshots works as follows. For snapshots that were directly added to an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink"/>:
            </para>
            <para>
            <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.StartCaching"/> is called from a background thread at the start of an update pass and before any calls to <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)"/>.
            </para>
            <para>
            <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.StopCaching"/> will be called from a background thread at the end of an update pass.
            </para>
            <para>
            <see cref="M:System.IDisposable.Dispose"/> will be called at the end of an update pass if either the snapshot had previously been removed or if the snapshot
            was a snapshot managed by an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/> and none of its entries are visible in table.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.StopCaching">
            <summary>
            Hint to the snapshot that the snapshot's entries will no longer be accessed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)">
            <summary>
            Get the data for the <paramref name="keyName"/> of the entry at <paramref name="index"/>.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.IndexOf(System.Int32,Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot)">
            <summary>
            Returns the index of the entry at <paramref name="currentIndex"/> in this snapshot in a later snapshot (<paramref name="newSnapshot"/>).
            </summary>
            <param name="currentIndex">Index of the entry in this <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>.</param>
            <param name="newSnapshot">Desired snapshot.</param>
            <returns>The index in <paramref name="newSnapshot"/> if it exists or -1 otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory">
            <summary>
            A manager that provides stable snapshots of a collection of entries at a point in time. The factory can provide a different snapshots over time
            (generating, for example, new snapshots after each build).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory.GetCurrentSnapshot">
            <summary>
            Get the current snapshot of the entries associated with the factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory.CurrentVersionNumber">
            <summary>
            The version number associated with the current snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory.GetSnapshot(System.Int32)">
            <summary>
            Get the snapshot associated with the specified <paramref name="versionNumber"/>. Return null if that snapshot
            is no longer available.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry">
            <summary>
            An entry that corresponds to a row of data in a table control.
            </summary>
            <remarks>
            <para>
            All methods on this interface can be called from either the main thread or a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)">
            <summary>
            Get the data associated with the specified column (if this entry has data associated with <paramref name="keyName"/>).
            </summary>
            <returns>true if the entry has data associated with the column.</returns>
            <remarks><paramref name="keyName"/>s are compared using a case-sensitive comparison.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TrySetValue(System.String,System.Object)">
            <summary>
            Set the data associated with the specified column (if this entry has data associated with <paramref name="keyName"/>).
            </summary>
            <returns>true if the value was changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.CanSetValue(System.String)">
            <summary>
            Can the data associated with the specified column be set?.
            </summary>
            <remarks>
            <para>This method returning true is not a guarantee that <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TrySetValue(System.String,System.Object)"/> will work for <paramref name="keyName"/>.</para>
            <para>This method is normally used so that the UI displaying this <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> can indicate whether or not the value can be set.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.Identity">
            <summary>
            Returns an object that uniquely identifies the entry.
            </summary>
            <remarks>
            <para>
            Two entries are considered equivalent if their <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.Identity"/> are equal using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.
            </para>
            <para>
            This property (and the related properties in <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/> are used to persist various attributes like selection state
            when an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> is replaced with a new <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>. Entries that replace an existing entry will have their
            attributes set based on the attributes of the replaced entry.
            </para>
            <para>
            When <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.ReplaceEntries(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.TableManager.ITableEntry})"/> is called, every entry in the
            list of old entries is checked to see if it has state and there is a corresponding entry among the added entries. If there is,
            then the two entries are considered equivalent and the old entry's attributes are copied to the new entry.
            </para>
            <para>
            When a <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory"/> replaces its snapshot with a new version, the entry state is transfered over exactly as if <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.ReplaceSnapshot(Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot,Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot)"/> had
            been called on the factory's old and new snapshots.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.TableEntryExtensions">
            <summary>
            Overload class for getting typed data from an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntryExtensions.TryGetValue``1(Microsoft.VisualStudio.Shell.TableManager.ITableEntry,System.String,``0@)">
            <summary>
            Try to get data of type <typeparamref name="T"/> from an entry.
            </summary>
            <typeparam name="T">Expected data type.</typeparam>
            <returns>true if the <paramref name="entry"/>.TryGetValue(...) returned true and the corresponding data was of type <typeparamref name="T"/>.</returns>
            <remarks>
            <paramref name="content"/> will be set to default(T) if <paramref name="entry"/>.TryGetValue(...) returns false or the returned data was not a <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntryExtensions.TryGetValue``1(Microsoft.VisualStudio.Shell.TableManager.ITableEntry,System.String,``0@,``0)">
            <summary>
            Try to get data of type <typeparamref name="T"/> from an entry.
            </summary>
            <typeparam name="T">Expected data type.</typeparam>
            <returns>true if the <paramref name="entry"/>.TryGetValue(...) returned true and the corresponding data was of type <typeparamref name="T"/>.</returns>
            <remarks>
            <paramref name="content"/> will be set to <paramref name="defaultValue"/> if <paramref name="entry"/>.TryGetValue(...) returns false or the returned data was not a <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntryExtensions.TryGetValue``1(Microsoft.VisualStudio.Shell.TableManager.ITableEntry,System.String,``0@,System.Func{``0})">
            <summary>
            Try to get data of type <typeparamref name="T"/> from an entry.
            </summary>
            <typeparam name="T">Expected data type.</typeparam>
            <returns>true if the <paramref name="entry"/>.TryGetValue(...) returned true and the corresponding data was of type <typeparamref name="T"/>.</returns>
            <remarks>
            <paramref name="content"/> will be set to <paramref name="defaultValue"/>() if <paramref name="entry"/>.TryGetValue(...) returns false or the returned data was not a <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager">
            <summary>
            A manager for tabular data of a particular type.
            </summary>
            <remarks>
            <para>
            This class is intended to manage data from multiple data sources, each of which can provide tens of thousands discrete entries.
            </para>
            <para>
            All methods on this interface can be called from either the main thread or a background thread.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier">
            <summary>
            Identifier of the table manager.
            </summary>
            <remarks>
            <para>This property will not change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableManager.AddSource(Microsoft.VisualStudio.Shell.TableManager.ITableDataSource,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Add <paramref name="source"/> to the list of sources associated with the table manager.
            </summary>
            <param name="source">Table data source.</param>
            <param name="columns">Indicates the columns that could be displayed by a table containing data from <paramref name="source"/>.</param>
            <returns>true if <paramref name="source"/> was added to the table manager's Sources. Returns false if it was not (because it was already one of the table manager's sources).</returns>
            <remarks>
            <para>This method can be called from any thread.</para>
            <para><paramref name="columns"/> must be immutable and callable from any thread.</para>
            <para>Adding a source may cause <paramref name="source"/>'s Subscribe() to be called immediately (before AddSource() returns).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableManager.AddSource(Microsoft.VisualStudio.Shell.TableManager.ITableDataSource,System.String[])">
            <summary>
            Add <paramref name="source"/> to the list of sources associated with the table manager.
            </summary>
            <param name="source">Table data source.</param>
            <param name="columns">Indicates the columns that could be displayed by a table containing data from <paramref name="source"/>.</param>
            <returns>true if <paramref name="source"/> was added to the table manager's Sources. Returns false if it was not (because it was already one of the table manager's sources).</returns>
            <remarks>
            <para>This method can be called from any thread.</para>
            <para>Adding a source may cause <paramref name="source"/>'s Subscribe() to be called immediately (before AddSource() returns).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableManager.RemoveSource(Microsoft.VisualStudio.Shell.TableManager.ITableDataSource)">
            <summary>
            Remove <paramref name="source"/> from the list of sources associated with this table manager.
            </summary>
            <returns>true if <paramref name="source"/> was removed from the table manager. Returns false if it was not (because it was not one of the table manager's Sources).</returns>
            <remarks>
            <para>Removing a source may cause <paramref name="source"/>'s to unnsubscribe (e.g. the call Dispose() on the subscription obkect) immediately (before RemoveSource() returns).</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Sources">
            <summary>
            The list of sources currently associated with the table manager.
            </summary>
            <remarks>The returned list is immutable and can be used by any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableManager.GetColumnsForSources(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.TableManager.ITableDataSource})">
            <summary>
            Get the union of all columns provided by any of the data sources in <paramref name="sources"/>.
            </summary>
            <remarks>The returned list is immutable and can be used by any thread.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TableManager.ITableManager.SourcesChanged">
            <summary>
            Raised whenever sources are added or removed from this table manager.
            </summary>
            <remarks>This event can be raised on any thread.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider">
            <summary>
            Provider for <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/>s.
            </summary>
            <remarks>
            <para>
            This is a MEF export. To get an instance of an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider"/>, use the following pattern:
            <code>
            [Import]
            internal ITableManagerProvider tableManagerProvider  { get; private set; }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider.GetTableManager(System.String)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> with the specified <paramref name="identifier"/>.
            </summary>
            <remarks>
            <para>Common identifiers can be found in <see cref="T:Microsoft.VisualStudio.Shell.TableManager.StandardTables"/>.</para>
            <para>This method can be called from any thread.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources">
            <summary>
            Standard <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> used by the Error and TaskLists.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.ErrorTableDataSource">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing errors to the error list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.CommentTableDataSource">
            <summary>
            <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing comment tasks to the task list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.ShortcutTableDataSource">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing shotcut tasks to the task list.
            </summary>
            <remarks>
            <para>Corresponds to GUID_Shortcut_TaskProvider.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.UserTableDataSource">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing user tasks to the task list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.FindAddReferencesDataSource">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing references to find all references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.FindResultsDataSource">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier"/> for sources providing results to find results.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.AnyDataSource">
            <summary>
            Represents a string identifier of an "any data source". Used by <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessorProvider"/> to identify
            event processors that are not limited to any particular data source.
            </summary>
            <remarks>Wildcards in the source string are not supported in general. This is handled as a special case.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames">
            <summary>
            Names of predefined keys for data in an ITableEntry.
            </summary>
            <remarks>
            <para>These constants should only be used to get data from an ITableEntry.</para>
            <para>They should not be used when calling declaring what columns should be displayed when a provider is active. Use StandardTableColumnDefinitions for those.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Line">
            <summary>
            The line number associated with a table-entry.
            </summary>
            <remarks>
            The raw value should be an integer. The first line of a file should be line 0.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Column">
            <summary>
            The column number associated with a table-entry.
            </summary>
            <remarks>
            The raw value should be an integer. The first column of a line should be column 0.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName">
            <summary>
            The full path of the document associated with a table-entry.
            </summary>
            <remarks>
            The raw value should be string.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text">
            <summary>
            The text associated with a table-entry.
            </summary>
            <remarks>
            <para>The raw value should be string.</para>
            <para>The length of this text should be constrained to what fits nicely in the error list. If it is too long, you should
            truncate text to something reasonable and return the untruncated text in <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.FullText"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.FullText">
            <summary>
            The full text associated with a table-entry in the case when <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> is truncated.
            </summary>
            <remarks>
            <para>The raw value should be string.</para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> has not been truncated, then attempts to get the value for this key should fail.</para>
            <para>If <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Text"/> has been truncated, then this value should contain the all of the truncated text (along with whatever text was removed).</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DetailsExpander">
            <summary>
            The details expander associated with a table-entry.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HasVerticalContent">
            <summary>
            Definition for whether a table-entry has vertical content.
            </summary>
            <remarks>
            The raw value should be a boolean.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HelpKeyword">
            <summary>
            Help keyword of the help associated with this table entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            <para>VS will, first, try to display help using the keyword. If that fails, it will try to
            open the link specified in <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HelpLink"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HelpLink">
            <summary>
            URI of the help associated with this table entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            <para>This entry will be used to open a URI if the either the entry has no <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HelpKeyword"/>
            or attempting to use the keyword to open help fails.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCategory">
            <summary>
            The error category.
            </summary>
            <remarks>
            Expected data type type is <see cref="T:System.String"/> (e.g. "Compiler").
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource">
            <summary>
            The entry's error source (e.g. <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ErrorSource.Build"/>).
            </summary>
            <remarks>
            <para>Expected data type is <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource"/>.</para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource"/> in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.BuildTool">
            <summary>
            The name of the tool that generated the error (e.g. "fxcop").
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverity">
            <summary>
            The error severity (despite the expected data type of the value).
            </summary>
            <remarks>
            Expected data type is __VSERRORCATEGORY.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.IsActiveContext">
            <summary>
            Was the error generated from the active context?.
            </summary>
            <remarks>
            <para>If this value is set, then the text associated with the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorSeverity"/> will have " (active)" or " (inactive)" appended to it, depending on the value.</para>
            <para>Expected data type is <see cref="T:System.Boolean"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Priority">
            <summary>
            The error priority.
            </summary>
            <remarks>
            Expected data type is <see cref="T:Microsoft.VisualStudio.Shell.CommentTaskPriority"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectName">
            <summary>
            The name of the project.
            </summary>
            <remarks>
            Expected data type is <see cref="T:System.String"/> (e.g. "ConsoleApplication1").
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectGuid">
            <summary>
            The Guid of the project.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.Guid"/>.</para>
            <para>Use IVsSolution.GetGuidOfProject to get the project's Guid from an IVsHierarchy.</para>
            <para>Performance will be improved if you "prebox" your <see cref="T:System.Guid"/> by, in your <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> or <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot"/>, having a member variable:
            <code>
                private object boxedProjectGuid = projectGuid;
            </code>
            and returning boxedProjectGuid instead of projectGuid.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ImageIndex">
            <summary>
            The IVsTaskItem.ImageListIndex() of the error (for errors reported using the legacy APIs).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSeverityImage">
            <summary>
            The icon used to indicate the error severity.
            </summary>
            <remarks>
            <para>Expected data type is Imaging.Interop.ImageMoniker.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.TaskCategory">
            <summary>
            The category of the item.
            </summary>
            <remarks>
            Expected data type is VSTASKCATEGORY.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.PriorityImage">
            <summary>
            The icon used to indicate the error priority.
            </summary>
            <remarks>
            <para>Expected data type is Imaging.Interop.ImageMoniker.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCode">
            <summary>
            The text displayed in the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorCode"/> column.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/> (e.g. "CS1591").</para>
            <para>If this value is not set, then the column will be left blank.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorCodeToolTip">
            <summary>
            The tooltip displayed in the <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableColumnDefinitions.ErrorCode"/> column.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank">
            <summary>
            The ranking of the error compared with other errors.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/>.</para>
            <para>Errors with the lowest rank are, by default, displayed first in the error list.</para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/> in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.OutputWindowMessageProvider">
            <summary>
            The message provider which writes the message text associated with a message ID to output window.
            </summary>
            <remarks>
            <para>The message ID under the same context of message provider must be unique.</para>
            <para>Expected value data type is a <see cref="T:System.Guid"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.OutputWindowMessageId">
            <summary>
            The message ID that is used to associate an entry in error list with a text nessage in output window.
            </summary>
            <remarks>
            <para>Expected value data type is an <see cref="T:System.UInt32"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SuppressionState">
            <summary>
            The suppression state of an error.
            </summary>
            <remarks>
            <para>Expected value data type is an <see cref="T:Microsoft.VisualStudio.Shell.TableManager.SuppressionState"/>.</para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out object. You can find boxed equivalents of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank"/> in Microsoft.VisualStudio.Shell.TableManager.Boxes.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Path">
            <summary>
            Returns the path of the file containing the error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.NameSpace">
            <summary>
            Returns the namespace containing the error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.LineText">
            <summary>
            Returns a plain text for an error or symbol reference.
            </summary>
            <remarks>Expected return type is string.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.TextInlines">
            <summary>
            Returned a list of <see cref="T:System.Windows.Documents.Inline"/> used to display formatted text for an error or symbol.
            </summary>
            <remarks>Expected return type is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.Definition">
             <summary>
             Returns the definition associated with a symbol reference.
             </summary>
             <remarks>
             <para>The expected return type is <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2"/>.</para>
             <para>The returned <see cref="M:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2.TryGetValue(System.String,System.Object@)"/> should return values for the following keys:
             <code>
                 StandardTableKeyNames.Text              Text associated with the defintion.
                 StandardTableKeyNames.DocumentName      Full path of the document containing the definition.
                 StandardTableKeyNames.Line              Line (0-based) of the defintion.
                 StandardTableKeyNames.Col               Column (0-based) of the defintion.
            
                 StandardTableKeyNames2.TextInlines     An enumeration of <see cref="T:System.Windows.Documents.Inline"/> to display formated text as part of the symbol definition [optional].
                 StandardTableKeyNames2.DefinitionIcon  An <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> to display with the symbol definition's text {optional].
             </code>
             </para>
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DefinitionIcon" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectNames" -->
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.HelpText">
            <summary>
            Returns a help text associated with the table entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:System.String"/>.</para>
            <para>This text is used to set AutomationProperties.HelpText on the associated entry.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DisplayPath">
            <summary>
            The full displayed path for the entry.
            </summary>
            <remarks>
            <para>
             <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> is the path used to navigate to the entry. <see cref="F:Microsoft.VisualStudio.Shell.TableControl.StandardTableKeyNames2.DisplayPath"/> is only used for what is displayed to the end user. If this is not set, then
             <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.DocumentName"/> is displayed to the end user.
             </para>
             <para>
             The displayed path does not have to correspond to a valid location but should follow the standard conventions with respect to disk and directory separators.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SymbolKind">
            <summary>
            The symbol kind associated with the entry.
            </summary>
            <remarks>
            <para>Expected data type is <see cref="T:Microsoft.VisualStudio.Shell.TableManager.SymbolReferenceKinds"/>.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.StandardTables">
            <summary>
            Standard <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier"/> used by the Error and Task Lists.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTables.ErrorsTable">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier"/> for the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> providing errors for the Error List.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.StandardTables.TasksTable">
            <summary>
            The string equivalent of the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier"/> for the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> providing tasks for the Task List.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThemeResourceKey">
            <summary>
            Represents a key used in a ResourceDictionary for accessing
            theme color resources.  Theme color resources include brushes
            and colors associated with a given color category and color name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.Category">
            <summary>
            Gets the category associated with this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.Name">
            <summary>
            Gets the name associated with this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.KeyType">
            <summary>
            Gets the type of resource specified by this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThemeResourceKeyType">
            <summary>
            Specifies the type of resource being referenced by a <see cref="T:Microsoft.VisualStudio.Shell.ThemeResourceKey"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData">
            <summary>
            Contains details on the progress of a long-running operation for purposes of updating the
            IVsThreadedWaitDialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData"/> class
            without reporting completion information.
            </summary>
            <param name="waitMessage">High-level description of the operation.</param>
            <param name="progressText">A more precise description of the operation in progress.</param>
            <param name="statusBarText">Message to display on the status bar.</param>
            <param name="isCancelable">A value indicating whether the user should be offered an option to cancel the operation.</param>
            <remarks>Threaded wait dialog will show marquee style progress bar because no detailed progress information is provided.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData"/> class
            and report completion information.
            </summary>
            <param name="waitMessage">High-level description of the operation.</param>
            <param name="progressText">A more precise description of the operation in progress.</param>
            <param name="statusBarText">Message to display on the status bar.</param>
            <param name="isCancelable">A value indicating whether the user should be offered an option to cancel the operation.</param>
            <param name="currentStep">Current step in the progress.</param>
            <param name="totalSteps">Total number of steps available. Use 0 to display the indeterminate marquee in the wait dialog.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.NextStep">
            <summary>
            Creates a clone of this instance with <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.CurrentStep"/> incremented by one.
            </summary>
            <returns>A modified clone of this instance.</returns>
            <remarks>
            No validation is done by this method to ensure that
            <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.CurrentStep"/> remains less than or equal to <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.TotalSteps"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext">
            <summary>
            Indicates the context in which <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)"/> is being called.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext.AutoAddingToToolbox">
            <summary>
            If <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)"/> returns non-null, the item will be
            automatically added to the toolbox.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext.ListingAddableItems">
            <summary>
            If <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)"/> returns non-null, the item will be
            added to a list of types in the Choose Toolbox Items dialog which the user may add to the toolbox.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.none">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation.none&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Top">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation.Top&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Left">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation.Left&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Right">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation.Right&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Bottom">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ToolWindowOrientation.Bottom&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VSCommands">
            <summary>
            Provides the routed commands supported by the VS shell.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VSCommands.ExecuteCommand">
            <summary>
            Executes a Visual Studio command table command.
            </summary>
            <remarks>
            The CommandParameter for this command is a string consisting of the
            VS command's canonical name optionally followed by the VS command's
            parameters (e.g. "File.Open readme.txt").
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VSCommands.Browse">
            <summary>
            Opens the Web Browser window in VS.
            </summary>
            <remarks>
            The CommandParameter for this command is a Uri or string containing the
            URL to be viewed in the Web Browser window.  If the parameter is null or
            empty, the home page specified in Tools > Options > Web Browser is opened.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsDockStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.none">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.none&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.MDI&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.Float&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.Linked&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.Tabbed&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;VsDockStyle.AlwaysFloat&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.AccountPickerOptions">
            <summary>
            Represents the options used to create an account picker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AccountPickerOptions.#ctor(System.Windows.Window,System.String)">
            <summary>
            Initializes a new instance of the options used to create an account picker.
            </summary>
            <param name="parentWindow">The window hosting the account picker.</param>
            <param name="hostId">A unique identifier for this host, usually the package guid, that will be used when reporting telemetry.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="hostId"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parentWindow"/> or <paramref name="hostId"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AccountPickerOptions.#ctor(System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the options used to create an account picker.
            </summary>
            <param name="parentWindow">The window hosting the account picker.</param>
            <param name="hostId">A unique identifier for this host, usually the package guid, that will be used when reporting telemetry.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="hostId"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parentWindow"/> or <paramref name="hostId"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.ParentWindowHandle">
            <summary>
            Gets the parent window object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.ParentWindow">
            <summary>
            Gets the window hosting the account picker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.CustomFilter">
            <summary>
            Gets or sets the picker's custom filter to determine accounts being displayed.
            Setting this will disable add new capability.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.HostId">
            <summary>
            Gets a unique identifier for this host, usually the package guid, that will be used when reporting telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.IsCompactHeight">
            <summary>
            Gets or sets the value that determines if the picker will be displayed in smaller height compared to the default height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.IsAuthenticationStateUIEnabled">
            <summary>
            Gets or sets the value that determines if the picker will show UI to allow the user to reenter credentials if the
            <see cref="P:Microsoft.VisualStudio.Shell.IWpfAccountPicker.SelectedAccount"/> needs re-authentication. This property is true by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AccountPickerOptions.UseWindowsPresentationFoundationStyle">
            <summary>
            Gets or sets the value that determines if the picker will use styles based on Windows Presentation Framework.
            </summary>
            <remarks>
            By default the picker will use Visual Studio style that works with Visual Studio themes.
            Set this to true if the host does not support Visual Studio style.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsAccountManagementService">
            <summary>
            Represents the Visual Studio account management service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAccountManagementService.CreateWpfAccountPickerAsync(Microsoft.VisualStudio.Shell.AccountPickerOptions)">
            <summary>
            Creates a Windows Presentation Foundation account picker.
            </summary>
            <param name="options">The options used to create an account picker.</param>
            <returns>An async task to obtain an IWpfAccountPicker instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="options"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IWpfAccountPicker">
            <summary>
            Represents the Windows Presentation Foundation account picker control provided by <see cref="T:Microsoft.VisualStudio.Shell.IVsAccountManagementService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IWpfAccountPicker.Control">
            <summary>
            Gets the Windows Presentation Foundation account picker control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IWpfAccountPicker.SelectedAccount">
            <summary>
            Gets or sets the account being selected for the account picker control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IWpfAccountPicker.SelectedAccountAuthenticationState">
            <summary>
            Gets a value indicating whether the <see cref="P:Microsoft.VisualStudio.Shell.IWpfAccountPicker.SelectedAccount"/> needs re-authentication.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICodeContainerProvider">
            <summary>
            Information about a provider that is capable of acquiring an online resource to a local machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ICodeContainerProvider.AcquireCodeContainerAsync(System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
            <summary>
            Acquires an online code container locally.
            </summary>
            <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ICodeContainerProvider.AcquireCodeContainerAsync(Microsoft.VisualStudio.Shell.CodeContainer,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
             <summary>
             Acquires a previously known online code container locally.
            
             An example of a previously known code container is for a given signed in user, a code container that was acquired on one device and available as an online code container on a
             second device and available for reacquisition.
             </summary>
             <param name="onlineCodeContainer">The online code container to acquire.</param>
             <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
             <param name="cancellationToken">A cancellation token to cancel the operation.</param>
             <returns>
             A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
             </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainer">
            <summary>
            Dummy class for a code container. Will be removed when a code container is actually available - when the Code Container Registry is ready.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.TokenValue">
            <summary>
            The last token value. If the value is empty call RefreshTokenValue.
            If RefreshToken fails it will be set to an empty string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.RefreshTokenValue">
            <summary>
            Get the token value (secret) for this credential. If the underlying credential has been deleted
            TokenValue will be an empty string. And false will be returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.SetTokenValue(System.String)">
            <summary>
            Sets the token value (secret) for this credential.
            If the underlying credential has already been deleted we will re-add it with the new token value.
            The token cannot be null or empty, or whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.GetProperty(System.String)">
            <summary>
            Get a property related to the credential out of storage
            The name cannot be null or empty, or whitespace
            If the property cannot be found or the underlying credential has been deleted null will be returned.
            Property names are case insensitive.
            </summary>
            <param name="name">Name of the property in storage.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.SetProperty(System.String,System.String)">
            <summary>
            Set a property related to the credential in storage.
            To remove a property you will need to remove the token itself from storage.
            The name cannot be null or empty, or whitespace
            The value cannot be null
            If the underlying credential could not be found false will be returned.
            Setting the same name again will overwrite the property
            Property names are case insensitive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.FeatureName">
            <summary>
            The feature name.
            </summary>
            <remarks>
            The FeatureName is case-sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.Resource">
            <summary>
            The credential resource name or uri.
            </summary>
            <remarks>
            The resource is case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.UserName">
            <summary>
            The credential user name, user id, or any app-specific unique value.
            </summary>
            <remarks>
            The user name is case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.Type">
            <summary>
            The type of the credential. Can be any app-specific value,
            but is intended to convey the authentication type.
            Therefore some examples might be:
            "Federated", "OAuth", "Windows", "Basic", "ServiceIdentity", "S2S".
            </summary>
            <remarks>
            The type is case-insensitive.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Add(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey,System.String)">
            <summary>
            Add a new credential to the storage.
            If a key already exists it is overwritten.
            </summary>
            <param name="credentialKey">Required, cannot be null.</param>
            <param name="credentialValue">Required, cannot be null, empty or whitespace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Retrieve(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey)">
            <summary>
            Retrieve the specified credential.
            The credential is a snapshot of what is in the credential store
            The methods on the IVsCredential are used to access the live data.
            If no credential is found null is returned.
            </summary>
            <param name="credentialKey">Required, cannot be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.RetrieveAll(System.String)">
            <summary>
            Retrieve ALL specified credential for a given feature name.
            If no credentials exist an empty enumeration is returned.
            Each credential is a snapshot of what is in the credential store
            The methods on the IVsCredential itself are used to access the live data.
            </summary>
            <param name="featureName">Required, cannot be null, empty or whitespace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Remove(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey)">
            <summary>
            Remove a credential from storage. If the credential did not exist or could not be removed
            false is returned.
            </summary>
            <param name="credential">Required, cannot be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.CreateCredentialKey(System.String,System.String,System.String,System.String)">
            <summary>
            Create a credential key which can be used with the retreieve and remove methods.
            </summary>
            <param name="featureName">Cannot be null, empty or whitespace.</param>
            <param name="resource">Cannot be null, empty or whitespace.</param>
            <param name="userName">Cannot be null, empty or whitespace.</param>
            <param name="type">Cannot be null, empty or whitespace.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.SVsCredentialStorageService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IReadOnlyObservableSet">
            <summary>
            A readonly observable collection that provides for constant time Contains look up.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IReadOnlyObservableSet`1">
            <summary>
            A readonly observable collection that provides for constant time Contains look up.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISelectedGraphNode">
            <summary>
            Holds a reference to a selected GraphNode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISelectedGraphNode.Node">
            <summary>
            Gets the selected GraphNode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionSearchOptions">
            <summary>
            Represents the options a search provider should use when providing
            search results for a search of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchOptions.SearchFileContents">
            <summary>
            Gets whether or not the content of files should be searched.  If true,
            search results from within file contents should be returned.  If false,
            no file content searches should occur.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchOptions.SearchExternalItems">
            <summary>
            Gets whether or not the content of external items should be searched.  If true,
            search results from within external items should be returned.  If false,
            no external items searches should occur.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionSearchParameters">
            <summary>
            Represents the parameters required to provide search results for a search
            of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.SearchQuery">
            <summary>
            Gets the search terms provided by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.Options">
            <summary>
            Gets the search options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.MaximumResults">
            <summary>
            Gets the maximum number of results that should be returned by the search.
            If more results than this are available, the search provider should call
            OnMaximumResultsExceeded to indicate that not all results were returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.OnMaximumResultsExceeded">
            <summary>
            Callback that should be called by a provider that could have returned more
            results, but which limited itself to the number of results requested
            by MaximumResults.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionTreeFilter">
            <summary>
            A filter that controls a collection of items that should be included in the filtered tree.
            When the IncludedItems are placed into a tree, these items and their ancestors will be included
            in the tree, and all other items will be excluded.
            <remarks>
            When the filter is no longer needed, the tree control will dispose the filter.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionTreeFilter.IncludedItems">
            <summary>
            Gets the set of items that are included by the filter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilter.GetFilterDescendantsBehavior(System.Object)">
            <summary>
            Decide whether to include descendents if none are exlicitly specified.
            </summary>
            <remarks>
            Default implementation includes for non-hierarchy items.  For hierarchies, it excludes for folder and project nodes and includes for typical member files.
            </remarks>
            <param name="item">The item to decide for.</param>
            <returns>Whether to exclude or include by default.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider">
            <summary>
            Factory used to create an ISolutionTreeFilter.  ISolutionTreeFilter provides a way to provide a list
            of included items which should be placed into the tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider.IsFilteringSupported(System.Collections.IEnumerable)">
            <summary>
            Determines whether or not this type of filter is supported when the given collection of items
            are at the root of the tree.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>True if the filter is supported, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider.CreateFilter(System.Collections.IEnumerable)">
            <summary>
            Creates a new filter for the given collection of root items.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>An ISolutionTreeFilter instance that can be applied to the tree to control
            which items are included in the tree's filtered subset.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISupportDisposalNotification">
            <summary>
            Represents an object which may become disposed, and which can notify listeners of
            changes to disposal state.  Objects which hold references to an instance of ISupportDisposalNotification
            should watch for property changes on the IsDisposed property, and should release their reference
            when the property's value becomes true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISupportDisposalNotification.IsDisposed">
            <summary>
            Determines if the item is disposed.  Changes to this property
            are notified through INotifyPropertyChanged.PropertyChanged,
            which allows consumers to easily use weak event listeners
            through PropertyChangedEventManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesService.StartSearch(System.String)">
            <summary>
            Opens an instance of the Find All References tool window.
            </summary>
            <param name="label">A localized text for the tool window's title.</param>
            <returns>A reference to an instance of the Find All References tool window.</returns>
            <remarks>
            This function will either return a new window or a refreshed instance of an old window. The caller should do the same thing in either case.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.TableControl">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> contained in the Find All References Window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.Manager">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> that provides data to the FAR's table control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.Title">
            <summary>
            Gets or sets the tool window's localized title.
            </summary>
            <remarks>
            <para>When setter is called, it is the caller's responsibility to provide a localized text for the title.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.AddCommandTarget(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
            <summary>
            Add <paramref name="target"/> to the windows list of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"/>.
            </summary>
            <param name="target">Command target to add.</param>
            <param name="next">Next command target in the chain.</param>
            <remarks>
            <para><paramref name="target"/> must forward the command is doesn't handle to <paramref name="next"/>.</para>
            <para>These command targets will automatically be removed when the FAR window is closed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.SetProgress(System.Double)">
            <summary>
            Set the value for the FindAllReferences progress bar.
            </summary>
            <param name="progress">A value indicating the progress of the FindAllReferences search.</param>
            <remarks>
            <para>
            <paramref name="progress"/> must be in the range [0.0, 1.0] inclusive, with 0.0 to start and 1.0 to stop the progress bar.
            When this method is called, a dterminate progress bar is shown, with the <paramref name="progress"/> indicating the search progress.
            </para>
            <para>
            If this method is never called, an indeterminate progress bar is shown if <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.IsStable"/> is false.
            The progress bar will stop animating when all of the data sources are stable <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.IsStable"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.SetProgress(System.Int32,System.Int32)">
            <summary>
            Set the value for the FindAllReferences search progress.
            </summary>
            <param name="completed">The progress that has been completed. A value between 0 and <paramref name="maximum"/>, inclusive.</param>
            <param name="maximum">The total progress value when search is done.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.FindAllReferences.IFindAllReferencesWindow.Closed">
            <summary>
            Raised when the FAR is closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FindResults.FindResult">
            <summary>
            Struct defining the data associated with a find result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Code">
            <summary>
            A line of text from the original document that contains the find result.
            </summary>
            <remarks>
            This should be truncated as needed to be no more than 200 or so characters.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Line">
            <summary>
            Line number of the find result (0-based).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Column">
            <summary>
            Column number of the find result (0-based).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Match">
            <summary>
            Location of the matching text within <see cref="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Code"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.FindResult.#ctor(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Text.Span)">
            <summary>
            ctor for <see cref="T:Microsoft.VisualStudio.Shell.FindResults.FindResult"/>.
            </summary>
            <param name="code">Entire line (or relevant subset) that contains the result.</param>
            <param name="line">Line number in the document of the start of the match.</param>
            <param name="column">Offset from the start of the line of the start of the match.</param>
            <param name="match">Span of text within <paramref name="code"/> that indicates the match text.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsService.StartSearch(System.String,System.String)">
            <summary>
            Opens an instance of the Find Results tool window.
            </summary>
            <param name="label">A localized text for the tool window's title.</param>
            <returns>A reference to an instance of the Find Results tool window.</returns>
            <remarks>
            This function will either return a new window or a refreshed instance of an old window. The caller should do the same thing in either case.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsService.StartSearch(System.String,System.String,System.String)">
            <summary>
            Opens an instance of the Find Results tool window.
            </summary>
            <param name="label">Localized text for the tool window's title.</param>
            <param name="description">Localized text for the description of the search.</param>
            <param name="identifier">Non-localized text for the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Identifier"/> of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/> used to post the results added by
            <see cref="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.AddResults(System.String,System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.FindResults.FindResult})"/> or
            <see cref="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.AddSnapshot(Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot)"/>.</param>
            <returns>A reference to an instance of the Find Results tool window.</returns>
            <remarks>
            This function will either return a new window or a refreshed instance of an old window. The caller should do the same thing in either case.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FindResults.IFindResultsSnapshotGenerator">
            <summary>
            Tool for generating <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot"/> for displaying find results.
            </summary>
            <remarks>
            Implemented by the <see cref="T:Microsoft.VisualStudio.Shell.FindResults.SVsFindResults"/> service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsSnapshotGenerator.CreateSnapshot(System.String,System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.FindResults.FindResult})">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot"/> with the indicated list of results.
            </summary>
            <param name="path">Full path to the file containing all of the find results. This path is displayed to the user and used for search.</param>
            <param name="displayPath">Path displayed to the end user as the document path. If null, <paramref name="path"/> is used instead.</param>
            <param name="snapshot"><see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> from which the find results were created (if open). Should be null if the document is not open.</param>
            <param name="results">A list of matches.</param>
            <returns>An immutable snapshot with all the find results.</returns>
            <remarks>
            You can create other snapshots for the same document if additional find results are generated later.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.TableControl">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl"/> contained in the FindResults Window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.Manager">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager"/> that provides data to the FindResults' table control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.Title">
            <summary>
            Gets or sets the tool window's localized title.
            </summary>
            <remarks>
            <para>When setter is called, it is the caller's responsibility to provide a localized text for the title.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.Description">
            <summary>
            Gets or sets the search description (e.g. Find all "foo", subfolders, ....).
            </summary>
            <remarks>
            <para>When setter is called, it is the caller's responsibility to provide a localized text for the title.</para>
            <para>Must be called from the UI thread.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.Summary">
            <summary>
            Gets or sets the search summary (e.g. Matching lines: 20 Matching file: 4).
            </summary>
            <remarks>
            <para>When setter is called, it is the caller's responsibility to provide a localized text for the title.</para>
            <para>Must be called from the UI thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.AddCommandTarget(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
            <summary>
            Add <paramref name="target"/> to the windows list of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"/>.
            </summary>
            <param name="target">Command target to add.</param>
            <param name="next">Next command target in the chain.</param>
            <remarks>
            <para><paramref name="target"/> must forward the command is doesn't handle to <paramref name="next"/>.</para>
            <para>These command targets will automatically be removed when the FAR window is closed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.SetProgress(System.Double)">
            <summary>
            Set the value for the FindResults progress bar.
            </summary>
            <param name="progress">A value indicating the progress of the FindAllReferences search.</param>
            <remarks>
            <para>
            <paramref name="progress"/> must be in the range [0.0, 1.0] inclusive, with 0.0 to start and 1.0 to stop the progress bar.
            When this method is called, a determinate progress bar is shown, with the <paramref name="progress"/> indicating the search progress.
            </para>
            <para>
            If this method is never called, an indeterminate progress bar is shown if <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.IsStable"/> is false.
            The progress bar will stop animating when all of the data sources are stable <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSink.IsStable"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.SetProgress(System.Int32,System.Int32)">
            <summary>
            Set the value for the FindResults search progress.
            </summary>
            <param name="completed">The progress that has been completed. A value between 0 and <paramref name="maximum"/>, inclusive.</param>
            <param name="maximum">The total progress value when search is done.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow.Closed">
            <summary>
            Raised when the FAR is closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.IsClosed">
            <summary>
            Has the find results window been closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.Complete">
            <summary>
            Called when all results have been generated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.AddSnapshot(Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot)">
            <summary>
            Add the <paramref name="snapshot"/> to the results displayed by the find window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow2.AddResults(System.String,System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.FindResults.FindResult})">
            <summary>
            Add a set of find matches to the results displayed by the find window.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow3">
            <summary>
            Interface to interact with Find Results Window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.FindResults.IFindResultsWindow3.Frame">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"/> associated with the find results window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsHierarchyItemCollectionProvider.GetDescendantsAsync(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a flat list of hierarchy items that exist within the specified hierarchy.
            </summary>
            <remarks>
            The set returned is kept up to date as the hierarchy changes.
            </remarks>
            <param name="hierarchy">The hierarchy from which the descendant hierarchy items are aggregated.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous request.</param>
            <returns>A task that when complete provides the flattened set of hierarchy items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsHierarchyItemCollectionProvider.GetFilteredHierarchyItemsAsync(Microsoft.VisualStudio.Shell.IReadOnlyObservableSet{Microsoft.VisualStudio.Shell.IVsHierarchyItem},System.Predicate{Microsoft.VisualStudio.Shell.IVsHierarchyItem},System.Threading.CancellationToken,System.Int32[])">
            <summary>
            Asynchronously gets a filtered set of hierarchy items from the specified hierarchy item set.
            </summary>
            <param name="sourceCollection">The hierarchy items to filter.</param>
            <param name="includeInFilter">The predicate used to determine what is included in the filtered set.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous request.</param>
            <param name="dependentProperties">An optional set of property ids that indicate the hierarchy item properties that affect the filter and as a result cause the includeInFilter predicate to be requeried.</param>
            <returns>A task that when complete provides the filtered set of hierarchy items.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsHierarchyItemManager.IsChangingItems">
             <summary>
             Gets whether or not item additions or removals from an IVsHierarchy are currently being processed.  This
             property will be true when changes from one of the following events are being processed:
            
             IVsHierarchyEvents.OnItemAdded
             IVsHierarchyEvents.OnItemDeleted
             IVsHierarchyEvents.OnItemsAppended
             IVsHierarchyEvents.OnInvalidateItems.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager">
            <summary>
            Platform SCC service.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.SccStatusChanged">
            <summary>
            Aggregates the events from active providers and routes to subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.OpenFolder(System.String)">
            <summary>
            Visual Studio can call it to hint working in particular folder and will be interested in SCC status for items under it.
            </summary>
            <param name="absolutePath">Path to folder being actively worked on (like one by Open Folder feature). Must be absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.CloseFolder(System.String)">
            <summary>
            Inform Folder SCC Manager that given folder is not a dev focus anymore. We may release associated bindings currently opened for this folder.
            </summary>
            <param name="absolutePath">Path to folder. Must be absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.GetSccStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Platform will delegate to the provider that binds to the path or its parent.
            </summary>
            <param name="absolutePath">Path to the file or folder.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The SCC status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider">
            <summary>
            Folder based SCC provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider.RootFolder">
            <summary>
            root folder full path that is serviced by this provider instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider.GetSccStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the scc status (checkout state and icon) of file or folder.
            </summary>
            <param name="absolutePath">path to the file or folder.</param>
            <param name="cancellationToken">cancelation token.</param>
            <returns>the item's status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder">
            <summary>
            Discovers SCC providers for a folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.BindAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Find a controling scc provider for "rootFolder".
            It is ok to look inside but that would be at discretion of what is convenient
            and performant for the current provider.
            It might return all known "roots" if it is global registration based.
            IVsSccFolderManager will attempt to rebind dynamically on get status.
            </summary>
            <param name="rootFolder">the folder root we need <see cref="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider"/> for. Must be absolute path.</param>
            <param name="cancellationToken">cancelation token.</param>
            <returns>IVsSccFolderProvider that was associated with this location.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.SccBindingsChanged">
            <summary>
            Notifies when bindings are changed (aka new repositories created or deleted, or provider is deactivated).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.SccStatusChanged">
            <summary>
            Aggregates the item status changed events from active providers and route to subscribers (FolderManager).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccBindingChangedEventArgs">
            <summary>
            Describes SCC bindings changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccBindingChangedEventArgs.ChangedBindings">
            <summary>
            Full paths to locations that bindigs changed(optional – can be empty collection or null in which case all bindings should be considered invalid).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccItemStatus">
            <summary>
            Scc status info for item (file or folder).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs">
            <summary>
            Describes SCC status changes for items (files or folders).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs.ChangeRoot">
            <summary>
            root folder that enclose all changes. It can be a repo root.
            If scoped down can optimize the user workload.
            If this value is null (or empty) ChangedItems is ignored, and it means every item (potentially across multiple repos
            may changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs.ChangedItems">
            <summary>
            Changed files (optional – can be null  in which case everything under ChangeRoot should be considered changed).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService">
            <summary>
            An optional project level service for the language service to update the designer type of project items.
            It is implemented by (but not limited to) the .Net Core project system to allow a background process detecting WinForm and other designer related files in the project,
            and saves the state to the project system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService.SetProjectItemDesignerTypeAsync(System.String,System.String)">
            <summary>
            Sets the designer type of a single project item.
            </summary>
            <param name="projectItemPath">The relative path (or full path) of a file inside the project.</param>
            <param name="designerType">The designer type should be set to the project item.</param>
            <returns>A task which finishes when the operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService.SetProjectItemsDesignerTypeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the designer type of a set of project items.
            </summary>
            <param name="itemPathAndDesignerTypes">
            A collection of value pairs, where the key represents the file item path (either project related path, or a full path), and the value represents a designer type.
            </param>
            <returns>A task which finishes when the operation is done.</returns>
            <remarks>Project items which are no longer in the project will be skipped.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.BulletinHandler">
            <summary>
            This is the delegate, provided by subscribers, that is called when a bulletin is published.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Publish(System.Object)">
            <summary>
            Sends a bulletin to all the subscribers for that bulletin.
            </summary>
            <param name="bulletin">The bulletin to be published.</param>
            <remarks>
            A <exception cref="T:System.NullReferenceException"/> will be thrown if <paramref name="bulletin"/> is null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Publish(System.Type,System.Object)">
            <summary>
            Sends a bulletin to all the subscribers for that bulletin identified by a specific Type.
            </summary>
            <param name="bulletinType">The Type that identifies the bulletin.</param>
            <param name="bulletin">The bulletin to be published.</param>
            <remarks>
            A <exception cref="T:System.NullReferenceException"/> will be thrown if <paramref name="bulletinType"/>
            or <paramref name="bulletin"/> are null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Subscribe(System.Type,Microsoft.VisualStudio.Shell.Services.BulletinHandler)">
            <summary>
            Registers a handler for the specified bulletin.
            </summary>
            <param name="bulletinType">The type of the bulletin being subscribed to.</param>
            <param name="handler">The handler to be invoked when this bulletin is published.</param>
            <remarks>
            A <exception cref="T:System.NullReferenceException"/> will be thrown if <paramref name="bulletinType"/>
            or <paramref name="handler"/> are null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Unsubscribe(System.Type,Microsoft.VisualStudio.Shell.Services.BulletinHandler)">
            <summary>
            Unregisters a handler for the specified bulletin.
            </summary>
            <param name="bulletinType">The type of the bulletin being unsubscribed from.</param>
            <param name="handler">The handler that is associated with the bulletin type.</param>
            <remarks>
            A <exception cref="T:System.NullReferenceException"/> will be thrown if <paramref name="bulletinType"/>
            or <paramref name="handler"/> are null.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.SVsPublishSubscribeService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CircularTaskDependencyException">
            <summary>
            Exception raised when a circular dependency would cause a deadlock during a requested task wait operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CircularTaskDependencyException.VS_E_CIRCULARTASKDEPENDENCY">
            <summary>
            VS specific error HRESULT code returned when an attempt to do a task wait operation would result in a
            deadlock due to circular dependency.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsTaskEvents">
            <summary>
            Interface for managed events implemented by IVsTask.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnBlockingWaitBegin">
            <summary>
            Raised when a blocking wait call made to IVsTask instance on main thread of Visual Studio
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnBlockingWaitEnd">
            <summary>
            Raised when a blocking wait call to IVsTask is finished on main thread of Visual Studio
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnMarkedAsBlocking">
            <summary>
            Raised when this task is marked as a blocking task for a wait on main thread of Visual Studio
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs">
            <summary>
            Event argument to be used with event that passes in blocking task information.
            The parameters identify the task that is being waited on UI thread (blocked task) and
            task that is blocking the wait (blocking task).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.BlockedTask">
            <summary>
            Gets the task that is being waited on UI thread and that needs to be unblocked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.BlockingTask">
            <summary>
            Gets the task that is blocking a task being waited on UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Creates a new BlockingTaskEventArgs instance.
            </summary>
            <param name="blockingTask">task that is blocking a task being waited on UI thread.</param>
            <param name="blockedTask">task that is being waited on UI thread and that needs to be unblocked.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskSchedulingException">
            <summary>
            Exception raised when a task scheduling failed and could not be retried.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskSchedulingException.VS_E_TASKSCHEDULERFAIL">
            <summary>
            VS specific error HRESULT code returned when a task couldn't be scheduled at the requested time.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo">
            <summary>
            Supplies information about an existing toolbox item.
            </summary>
            <remarks>
            Implemented by packages and supplied via IToolboxItemCreator.GetItemInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.TypeName">
            <summary>
            Gets the full hierarchical type name of the item (not including the assembly name).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.AssemblyName">
            <summary>
            Gets the assembly name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.CustomProperties">
            <summary>
            Gets the strings to display in the dialog's "custom" columns, or null if no custom
            properties are needed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl">
            <summary>
            This interface is implemented by clients who want to control the creation of the appdomain
            in which their IToolboxItemDiscovery implementation is created.  If your package derives
            from Microsoft.VisualStudio.Shell.Package, set the AppDomainCreatorType property of your
            ProvideToolboxItemDiscoveryAttribute to the type of your class which implements this
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl.CreateAppDomain">
            <summary>
            Creates an appdomain for assembly loading.  This is the appdomain that will be passed to
            IToolboxItemDiscoveryFactory.CreateItemDiscovery, and in which assemblies will be loaded
            so that their types can be enumerated and passed to IToolboxItemDiscovery.GetItemInfo.
            </summary>
            <returns>The newly created appdomain.</returns>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl.UnloadAppDomain(System.AppDomain)">
            <summary>
            Unloads an appdomain created by CreateAppDomain.
            </summary>
            <param name="appDomain">The appdomain to unload.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxAssemblyInfo">
            <summary>
            Supplies information about an assembly.
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxType.AssemblyInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxAssemblyInfo.OriginalPath">
            <summary>
            The original path from which the assembly was loaded.  This may differ from the Location
            property of the assembly, for example if the assembly is in the GAC.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo">
            <summary>
            Supplies information about an extensions SDK.
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxExtensionsSdkType.SdkInfo.  See the SDK
            schema documentation for details about these properties.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo.Path">
            <summary>
            The path of the SDK on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo.TargetPlatform">
            <summary>
            The target platform of the SDK, e.g. "Windows, Version=8.0".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkType">
            <summary>
            Represents a managed type from an extensions SDK.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemCreator">
            <summary>
            Creates new toolbox items and supplies information about existing toolbox items.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.ItemCreator.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            itemCreatorType argument to ProvideToolboxItemDiscoveryAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemCreator.GetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <summary>
            Returns information about a control installed on the toolbox.
            </summary>
            <returns>The info about this item, or null if the item is not recognized by this provider.</returns>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemCreator.CreateToolboxItem(System.String,System.Reflection.AssemblyName,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a toolbox item from the specified type.
            </summary>
            <param name="typeName">A full hierarchical type name.</param>
            <param name="assemblyName">The assembly in which <paramref name="typeName"/> was found.</param>
            <param name="itemProperties">The properties obtained from IToolboxItemInfo.GetPropertyValue for this item.</param>
            <param name="extraInfo">The collection returned from IToolboxItemInfo.ExtraInfo for this item.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery">
            <summary>
            Provides information about managed types from which toolbox items could be created.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.CreateItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            dicoveryType argument to ProvideToolboxItemDiscoveryAttribute.  This object is only used
            in a secondary appdomain which is unloaded after assembly enumeration completes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery.AdditionalAssemblyPaths">
             <summary>
             Gets a collection of additional assembly paths to search for toolbox items.
             </summary>
             <remarks>
             For each framework in the "frameworksToEnumerate" argument of the ProvideToolboxItemDiscovery
             attribute, the toolbox will enumerate all assemblies registered under AssemblyFoldersEx keys,
             and pass their types to GetItemInfo.  However, if you want additional assemblies to show up
             in your list, you can supply their paths here.  You can even omit the "frameworksToEnumerate"
             argument altogether to use only the assemblies returned from this property.  You can return
             null or an empty enumerator if you don't need to provide any additional assemblies.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType)">
             <summary>
             Returns the IToolboxItemInfo corresponding to a given type.
             </summary>
             <returns>The info about this type, or null if the type is not a valid toolbox control type recognized by this provider.</returns>
             <remarks>
             This method should inspect the type of the <param name="type">type</param> argument if
             it needs to provide different information depending on the source of the type (such as
             an extension SDK).  See the IToolbox*Type interfaces that derive from IToolboxType.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory">
            <summary>
            Creates various objects required for integration with the Choose Toolbox Items dialog.
            </summary>
            <remarks>
            Implemented by packages and passed as an argument to IVsToolboxItemDiscoveryRegistrar.RegisterItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package get this behavior by default from
            their base class.  In that case, the behavior of the object is controlled by parameters provided
            to ProvideToolboxItemDiscoveryAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory.CreateItemDiscovery(System.AppDomain)">
             <summary>
             Creates an object in the given appdomain that implements IToolboxItemDiscovery.
             </summary>
             <param name="domain">The domain in which the object should be created.</param>
             <returns>A handle to the created object.</returns>
             <remarks>
             This method is called from the primary appdomain (which is different from the domain
             passed as an argument).  The object handle will not be unwrapped in any domain other
             than the one it was created in, so the object does not need to be serializable or
             derive from MarshalByRefObject.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory.AppDomainCreator">
             <summary>
             Gets the object which is used to create and unload the appdomain that is passed to
             CreateItemDiscovery.
             </summary>
             <remarks>
             This may be null if you don't need to set any specific parameters for appdomain
             creation.
            
             This property may be accessed on a background thread.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory.ItemCreator">
            <summary>
            Gets the object that is used to create new toolbox items and get information about
            existing toolbox items.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsToolboxItemDiscoveryRegistrar">
            <summary>
            Implemented by service SVsToolboxItemDiscoveryRegistrar, which is provided by the shell.
            Packages wishing to provide toolbox items from managed types should call RegisterItemDiscovery
            when they load.  Packages deriving from Microsoft.VisualStudio.Shell.Package get this behavior
            by default from their base class.  In that case, the behavior of the object is controlled by
            parameters provided to ProvideToolboxItemDiscoveryAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsToolboxItemDiscoveryRegistrar.RegisterItemDiscovery(System.Type,Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryFactory)">
            <summary>
            Registers a factory which can supply toolbox items corresponding to managed types.
            </summary>
            <param name="itemType">A type which must match the discoveryType argument to ProvideToolboxItemDiscoveryAttribute.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsToolboxItemDiscoveryRegistrar">
            <summary>
            This is the service that implements IVsToolboxItemDiscoveryRegistrar.  It is implemented by the shell.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemInfo">
            <summary>
            Supplies information about a managed type from which a toolbox item may be created.
            </summary>
            <remarks>
            Implemented by packages and supplied via IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.DisplayName">
            <summary>
            Gets the display name of the toolbox item.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.Icon">
             <summary>
             Gets the icon for the toolbox item, as a file path, byte array, Bitmap, or IntPtr.
             </summary>
             <remarks>
             This value can be any of the following, in order of decreasing efficiency
             (i.e. you should prefer the lower-numbered options):
                 1. The path to an image file (as a string).
                 2. A byte array containing the bytes of an image file.
                 3. A System.Drawing.Bitmap object.
                 4. A win32 GDI bitmap handle (as an IntPtr).
             For the file path and byte array, all GDI+ file types are supported: BMP, GIF, JPG, PNG
             and TIFF.
            
             This property may be accessed on a background thread.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.TransparentColor">
            <summary>
            Gets the background color which will be rendered as transparent in the toolbox image.
            This may be a System.Drawing.Color or a System.Windows.Media.Color.  Any other type, or
            a null value, will result in an exception being thrown.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemInfo.GetPropertyValue(System.String)">
            <summary>
            Given a property ID, returns the corresponding value for this item.
            </summary>
            <param name="name">A non-localized ID from the ItemPropertyIdsAndNames property of ProvideToolboxItemDiscoveryAttribute.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.ExtraInfo">
            <summary>
            Gets a collection of name-value pairs which will be passed to IToolboxItemCreator.CreateToolboxItem
            if the user chooses to create the item.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxPlatformInfo">
            <summary>
            Supplies information about a platform (such as Windows v8.0).
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxPlatformType.TargetPlatform.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxPlatformType">
            <summary>
            Represents a managed type with an associated platform.  Other interfaces derive from this
            to add additional metadata.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxType">
            <summary>
            Represents a simple managed type.  Other interfaces derive from this to add additional
            metadata.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2">
            <summary>
            Expands <see cref="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress"/> to enable stage access in a JoinableTaskFactory compatible way in order to avoid potential deadlocks when awaiting on operations in progress.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})">
            <summary>
            Registers tasks to the operation progress using a <paramref name="taskRegistrationActionAsync"/>.
            When all registered tasks and the task registration action are completed, the access to the stage is considered completed.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access.
            See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds"/> for common stages.</param>
            <param name="name">Invariant name of this access used to log telemetry.</param>
            <param name="estimatedTaskCount">An initial estimate of the number of
            <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/> that will be registered for this access.
            Used to estimate progress of this access.</param>
            <param name="taskRegistrationActionAsync">Action that registers work to the stage access.
            Its duration in combination with the duration of the registered tasks control the duration of the stage.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the <paramref name="taskRegistrationActionAsync"/> completes.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad">
            <summary>
            Information about operations in progress correlated with solution load.
            Note: Current interface and behavior are preliminary and subject to change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad.IsInProgress">
            <summary>
            Gets a value indicating whether if the stage is in progres or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad.WaitForCompletionAsync">
            <summary>
            Waits for solution load and any in-progress work to complete. If no work was in progress, it completes when solution is loaded.
            </summary>
            <returns>A task that transitions to a completed state when the work in-progress has completed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus">
            <summary>
            Represents the status of the stage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus.IsInProgress">
            <summary>
            If the stage is in progres or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus.Version">
            <summary>
            The associated version number. Version number increases when there are changes to the state.
            Notification events are typically sent in a queue and can be behind the current state. Listeners can use version number to discard outdated notifications.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.InProgressChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs.#ctor(Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs"/>.
            </summary>
            <param name="status">The new status.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs.Status">
            <summary>
            The status of the stage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus">
            <summary>
            Information about operation progress stages.
            Note: Current interface and behavior are preliminary and subject to change.
            The status includes contributions to the stage itself as well as contributions to the known upstream stages.
            For example, the Intellisense stage status includes scheduled work in the following stages: Projects Loaded, Updating Projects and Intellisense.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.Status">
            <summary>
            Gets the status of the stage.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.InProgressChanged">
            <summary>
            Event that gets triggered when the stage becomes in progress or when it completes the scheduled work.
            Notifications are queued and triggered asynchronously, on a background thread and could be delayed.
            Subscribers can use the version number received via <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs"/> in combination with <see cref="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.Status"/> to detect whether the notification is old.
            Whenever possible, it is recommended to use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.WaitForCompletionAsync"/> instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.WaitForCompletionAsync">
            <summary>
            Waits for the current work in-progress to complete.
            </summary>
            <returns>A task that transitions to a completed state when the work in progress has completed, associated with the version number at the time of completion.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService">
            <summary>
            Provides status information about the operations registered with <see cref="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService.GetStageStatus(System.String)">
            <summary>
            Provides access to the status of the specified stage.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access. See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds"/> for common stages.</param>
            <returns>An object that provides status information.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService.GetStageStatusForSolutionLoad(System.String)">
            <summary>
            Provides access to the status of the specified stage, correlated with solution loads.
            </summary>
            <param name = "operationProgressStageId" >The identifier of the stage to access.See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds"/> for common stages.</param>
            <returns>An object that provides status information.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions">
            <summary>
            Holds options for <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.RegisterStageId(System.String,Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions)"/> to register a new OperationProgressStage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions.#ctor(System.String)">
            <summary>
            Creates new options for registering an OperationProgressStage.
            </summary>
            <param name="displayName">Display name of the stage that can be shown to user.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions.DisplayName">
            <summary>
            Gets the display name of the stage that can be shown to user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess">
            <summary>
            Represents a contribution to a particular operation stage.
            When contribution is done, consumer should call <see cref="M:System.IDisposable.Dispose"/> or put this
            object in a using.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.RegisterTask(Microsoft.VisualStudio.OperationProgress.OperationProgressTask)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/> that contributes work to this stage. If more
            tasks are registered than <see cref="P:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.EstimatedTaskCount"/>, the number of registered tasks takes
            priority.
            </summary>
            <param name="operationProgressTask"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.EstimatedTaskCount">
            <summary>
            Gets or sets the estimated task count for this stage that will be used to help estimate stage progress.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress">
            <summary>
            Service that tracks and displays information about operations in progress.
            To access a stage please use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.AccessStage(System.String,System.String,System.UInt32)">
            <summary>
            Obsolete. Please use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})"/> instead.
            Accesses a particular OperationProgressStage. When there are no more accesses to a particular stage,
            the stage is considered completed.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access.
            See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds"/> for common stages.</param>
            <param name="name">Invariant name of this access used to log telemetry.</param>
            <param name="estimatedTaskCount">An initial estimate of the number of
            <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/> that will be registered for this access.
            Used to estimate progress of this access.</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess"/>, the lifetime of which represents
            the liftetime of this access.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.RegisterStageId(System.String,Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions)">
            <summary>
            Registers a new stage based on the id passed in. If the id is already registered, this function is a no-op.
            </summary>
            <param name="operationProgressStageId">Id of the stage to register.</param>
            <param name="operationProgressStageOptions">Options around how to display this OperationProgressStage.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask">
            <summary>
            Represents a unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Creates a new unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess"/>.
            </summary>
            <param name="joinableTask">Task that represents part of an operation.</param>
            <param name="name">Invariant name of this unit of work.</param>
            <param name="displayName">A function that returns a <see cref="T:System.Threading.Tasks.Task`1"/> to get the DisplayName.
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/>. Will only be called if actually needed
            to display to user.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(System.Threading.Tasks.Task,System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Obsolete. Please use <see cref="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.Func{System.Threading.Tasks.Task{System.String}})"/> instead
            to avoid potential deadlocks when awaiters wait on operation progress completion.
            Creates a new unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess"/>.
            </summary>
            <param name="task">Task that represents part of an operation.</param>
            <param name="name">Invariant name of this unit of work.</param>
            <param name="displayName">A function that returns a <see cref="T:System.Threading.Tasks.Task`1"/> to get the DisplayName
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/>. Will only be called if actually needed
            to display to user.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Task">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Task"/> that represents part of an operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.JoinableTask">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.JoinableTask"/> that represents part of an operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.DisplayName">
            <summary>
            Gets a function that returns a <see cref="T:System.Threading.Tasks.Task`1"/> to get the DisplayName
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/>. Will only be called if actually needed
            to display to user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Name">
            <summary>
            Gets the invariant name of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask"/> that can be reported in Telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.ProjectId">
            <summary>
            Gets or sets the optional ProjectId <see cref="T:System.Guid"/> used to tie this task to a Project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.IsRegistrationTask">
            <summary>
            Specifies whether this is the default task used for work registration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler2">
            <summary>
             Interface representing the objects tracked by the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/>.
             These objects are given back to callers to interact with the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> with regards to their registered
             task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler2.Dismiss">
            <summary>
            Removes this task from being tracked or presented by the task status center.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler">
            <summary>
             Interface representing the objects tracked by the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/>.
             These objects are given back to callers to interact with the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> with regards to their registered
             task.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Options">
            <summary>
             Gets a copy of the options configured at initialization
             for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> behaviour and data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.UserCancellation">
            <summary>
             Gets the token that indicates whether the user has requested cancellation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress">
            <summary>
             Gets  the <see cref="T:System.IProgress`1"/> from this.
             Can be used to update the behaviour and state of this via <see cref="M:System.IProgress`1.Report(`0)"/>.
            </summary>
            <requires>
             <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.PercentComplete"/> must be >= 0 AND &lt;= 100.
            </requires>
            <remarks>
            If requires is not met, then the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/> will not be updated
            and will appear as a non operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.RegisterTask(System.Threading.Tasks.Task)">
            <summary>
             Registers task with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> that the
             caller wants to have tracked.
             Task will be displayed in the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> UI.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> that the caller wants to
             have tracked via the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/>.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory">
            <summary>
             Provides the icon and tooltip to display, and a control
             that displays the list of currently running tasks.
            </summary>
            <remarks>
             An instance of this interface is acquired by querying for
             the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterViewFactory"/> then using it
             as <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory.CurrentIcon">
             <summary>
              Gets the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/> icon for <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService"/>
              current state.
             </summary>
             <example>
              States:
                 1.) Empty Task Status Center
                 2.) Completed Tasks
                 3.) Running Tasks
                 4.) Failure
            
              There would be a corresponding icon for each of these states.
             </example>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory.ToolTipText">
            <summary>
             Gets the text for the tool tip tip display when hovering over
             the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory.CurrentIcon"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterViewFactory.NewView">
            <summary>
             Creates a new control that lists running tasks registered with the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService"/>.
            </summary>
            <returns>A new WPF control that contains the tracked tasks.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService">
            <summary>
             The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> allows the caller of this service
             to Register <see cref="T:System.Threading.Tasks.Task"/> tasks with this service.  The caller can then
             configure how information about their task is displayed to the User via the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService.PreRegister(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions,Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData)">
            <summary>
             PreRegister configures an initial <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> based on the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions"/> and <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/> passed in.
             The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions"/> will be immutable for the life time of
             the task.  The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/> are mutable, and can be updated via
             the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress"/>.
            </summary>
            <param name="options"> a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions"/> dictating the
             immutable states, behaviours, and action of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/>
             returned.
            </param>
            <param name="data">
             When a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> is initialized, it has not been
             "reported" on yet via the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress"/>
             so an initial <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/> can be passed in here.
            </param>
            <returns>
             Returns an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> that can be used to register and update the
             the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> UI's display regarding the task
             registered.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService">
            <summary>
             Interface for getting the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterViewFactory">
            <summary>
            Service Interface for the TaskStatusCenterService.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions">
            <summary>
             Holds options for a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> that are configured
             on initialization.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.Title">
            <summary>
             A value indicating the title of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/>
             associated with these options.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.ActionsAfterCompletion" -->
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails">
            <summary>
            A value used to invoke a caller supplied <see cref="T:System.Action`1"/>.
            to give more details about the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> associated with
            this, to the user.  Could lead the user to the tool window associated with the
            task, or open up an error log for example.  If the task has any visibility
            after completion regarding <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions"/>, then
            <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails"/> can not be null.  The <see cref="T:System.Threading.Tasks.Task"/>
            in the <see cref="T:System.Action`1"/> will be the <see cref="T:System.Threading.Tasks.Task"/> registered
            with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/>.  This will be passed
            in when <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails"/> is invoked.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.TaskSuccessMessage">
            <summary>
            An optional value that clients can use to specify a customized success message
            upon completion of task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.ClientId">
            <summary>
            An optional value that clients can specify in order to display tips, either at the
            start or end of a task. This must be whitelisted by the IDE Exp team.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.StartTipCalloutId">
            <summary>
            An optional value that clients can specify in order to display a tip at the start of a task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.EndTipCalloutId">
            <summary>
            An optional value that clients can specify in order to display a tip at the completion of a task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData">
            <summary>
             A struct that holds the updatable data for a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/>.
             The data is related to the ongoing progress of a
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> task.  The data will be
             displayed in the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService"/> UI appropiately.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.ProgressText">
            <summary>
             Gets or sets a string value indicating extra information about the
             current progress of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/>
             associated with this <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.CanBeCanceled">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/>
             associated with this <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData"/> is
             cancellable at this moment in time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.PercentComplete">
            <summary>
             Gets or sets a value indicating the percentage complete
             the task associated with this is.
            </summary>
            <value>
            0 &lt;= PercentComplete &lt;= 100
            Specifying null will result in an indeterminate (spinning with
            no indication of percentage complete) progress bar.
            </value>
            <exception>
            <see cref="T:System.ArgumentException"/> if requires is not met.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions">
            <summary>
             A set of flags that mark the visibility of a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler"/> in the Task Status Center UI upon completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None">
            <summary>
             After completion the task associated with this flag is removed from the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainOnRanToCompletion">
            <summary>
            After the task associated with this flag runs to completion it is retained in the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainOnFaulted">
            <summary>
            After the task associated with this flag faults it is retained in the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainAndNotifyOnRanToCompletion">
            <summary>
            After the task associated with this flag runs to completion it is retained in the Task Status Center UI
            and a visual notification is provided to the user indicating the task completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainAndNotifyOnFaulted">
            <summary>
            After the task associated with this flag faults it is retained in the Task Status Center UI
            and a visual notification is provided to the user indicating the task faulted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService">
            <summary>
            Exposes functionality related to the code container provider service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService.IsCodeContainerProviderInstalled(System.Guid)">
            <summary>
            Checks to see if a given provider is installed on the machine.
            </summary>
            <param name="provider">The guid of the provider.</param>
            <returns>True: if the provider is installed, False: if the provider is not installed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService.AcquireAndTryOpenCodeContainerAsync(System.Guid,Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Kick-off the appropriate acquisition workflow provided by <paramref name="provider"/> for
            <paramref name="onlineCodeContainer"/>. Also open the acquired Container if acquisition succeeds.
            </summary>
            <param name="provider">The ID of the <see cref="T:Microsoft.VisualStudio.Shell.ICodeContainerProvider"/> that can be used to acquire <paramref name="onlineCodeContainer"/>.</param>
            <param name="onlineCodeContainer">The online code container to acquire if any.</param>
            <returns>A flag indicating whether acquisition succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetValue``1(System.String,System.String,``0)">
            <summary>
            Gets a remote setting value. This does not return the most up-to-date setting, but the value
            of whatever RemoteSettings has processed so far.
            </summary>
            <typeparam name="T">The type of setting. This must match the value read from the registry (e.g. <see cref="T:System.String"/>, <see cref="T:System.Int32"/>, etc.). It cannot be an enum type based on an <see cref="T:System.Int32"/>, for example.</typeparam>
            <param name="collectionPath">Path to the remote setting collection in the form My\Custom\Path.</param>
            <param name="key">Key of the remote setting.</param>
            <param name="defaultValue">Value to return if remote setting does not exist.</param>
            <returns>Remote setting value if it exists, otherwise defaultValue.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetValueAsync``1(System.String,System.String,``0)">
            <summary>
            Gets a remote setting value, that is updated with both Targeted Notifications backend and RemoteControl
            file. Must be called after Start.
            </summary>
            <typeparam name="T">The type of setting. This must match the value read from the registry (e.g. <see cref="T:System.String"/>, <see cref="T:System.Int32"/>, etc.). It cannot be an enum type based on an <see cref="T:System.Int32"/>, for example.</typeparam>
            <param name="collectionPath">Path to the remote setting collection in the form My\Custom\Path.</param>
            <param name="key">Key of the remote setting.</param>
            <param name="defaultValue">Value to return if remote setting does not exist.</param>
            <returns>Remote setting value if it exists, otherwise defaultValue.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetActionsAsync``1(System.String)">
            <summary>
            Gets all remote actions of type T, wrapped in ActionWrapper. Waits for the call to Targeted Notifications backend
            to complete. Must be called after Start.
            </summary>
            <typeparam name="T">The type of action.</typeparam>
            <param name="actionPath">Unique path to identify the actions to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2.SubscribeActions``1(System.String,System.Action{Microsoft.VisualStudio.RemoteSettings.ActionWrapper{``0}})">
            <summary>
            Subscribes to triggered remote actions of type T on the given action path.
            </summary>
            <typeparam name="T">The type of action.</typeparam>
            <param name="actionPath">Unique path to identify the actions to subscribe.</param>
            <param name="callback">Callback to be invoked with each individual action when it becomes available.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2.UnsubscribeActions(System.String)">
            <summary>
            Unsubscribes from triggered remote actions on the given action path.
            </summary>
            <param name="actionPath">Unique path to identify the actions to unsubscribe.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea">
             <summary>
             Determines which areas are supported as drop targets
             by items implementing IDragDropTargetPattern.
            
             NOTE: The values in this enumeration correspond to the values.
             of the Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea enumeration.
             Changes here should have corresponding changes in __HierarchyDropArea.
             </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.None">
            <summary>
            Dropping on the item is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.On">
            <summary>
            Dropping on the item is supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.Above">
            <summary>
            Dropping above the item is supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.Below">
            <summary>
            Dropping below the item is supported.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IBatchInitializationScopeProvider">
             <summary>
             Represents an extension point that can provide optimized behavior in a scope
             where many items are being initialized.  For example, if many items are initialized
             as part of a transaction, but each individual item is unaware of the larger scope,
             this scope can be used to control that transaction while the initialization is happening.
            
             IBatchInitializationScopeProviders are consumed by an implementation of IRelationshipService
             as part of its CreateBatchInitializationScope logic.
             </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IBrowsablePattern">
            <summary>
            Represents an object that supports returning a browse object.  Browse objects
            are used by UI like the Properties window to expose additional property information
            about an object.  A browse object itself has no contract beyond IDispatch-style
            member discoverability.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IBrowsablePattern.GetBrowseObject">
            <summary>
            Gets the browse object associated with the browsable object.
            </summary>
            <returns>A browse object, or null if browsing isn't supported.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IInteractionPatternProvider">
            <summary>
            Represents an interface that can be used to query for supported UI patterns.
            This type is used by the Solution Navigator tree control to query items
            for support of various UI patterns, including rename, invocation, context menus,
            drag-drop source support, and drag-drop target support.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IInteractionPatternProvider.GetPattern``1">
            <summary>
            Queries the provder for support of the given pattern interface.
            </summary>
            <typeparam name="TPattern">The pattern interface to get an instance of.</typeparam>
            <returns>The instance implementing the pattern, or null if the pattern isn't supported.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.InputSource">
            <summary>
            Specifies the origin of the input for use in a IInvocationControler.Invoke call.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.Mouse">
            <summary>
            The source of the invocation is the mouse
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.Keyboard">
            <summary>
            The source of the invocation is the keyboard
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.None">
            <summary>
            The source of the invocation is not a direct user action
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IPivotItemProviderPattern">
            <summary>
            Represents an option interface an item can implement that allow it to return a
            different item instance when pivoting on a relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IPivotItemProviderPattern.CreatePivotRootItem(Microsoft.VisualStudio.Shell.IAttachedRelationship)">
            <summary>
            Creates a new object representing this item for the given relationship.  This
            can be used to clone the item or to provide additional context to the item
            related to the different relationship it will be displayed with.
            </summary>
            <param name="relationship">The relationship that's being pivoted on.</param>
            <returns>The object instance that should be used to represent this
            item in the new view.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IPrioritizedComparable">
            <summary>
            Represents a comparable item that has a priority associated with it.  Items with inequal priority will be ordered based solely on priority.
            Items with equal priority will be ordrered based on the results of the IComparable.  This allows multiple classes of items which
            aren't comparable with each other (perhaps because they're unaware of each other's existence) to still be ordered deterministically.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IPrioritizedComparable.Priority">
            <summary>
            Gets the priority for this item.  Items with equal priority will be compared
            based on the IComparable.CompareTo result.  Items with inequal priority
            are compared solely by priority.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern">
            <summary>
            Represents an item that supports manual refresh.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern.RefreshAsync">
            <summary>
            Begins the asynchronous refresh on the set of items.  When
            execution of the asynchronous refresh has completed, the returned Task
            is completed.
            </summary>
            <param name="items">The items to refresh.</param>
            <returns>A Task which will complete when the asynchronous refresh
            is finished.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern.CancelLoad">
            <summary>
            Cancels the current load operation, leaving the item in a
            partially-refreshed state.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters">
            <summary>
            Represents a set of search parameters that includes information about the
            relationship being searched, the set of source items, and cancelation information.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.CancellationToken">
            <summary>
            Gets the CancellationToken that should be checked in order to
            determine if the search should continue executing.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.SourceItemHints">
            <summary>
            Gets the list of root item of the view being searched.  This can
            optionally be used by the ISearchProvider to provide
            optimized results, as only results that are reachable
            by following the RelationshipHint starting at items in the SourceItemHints
            must be provided.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.RelationshipHint">
            <summary>
            Gets the relationship being shown in the view being searched.
            This can optionally be used by the ISearchProvider to provide
            optmized results, as only results that are reachable by following
            the RelationshipHint starting at the SourceItem hint must be provided.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject">
            <summary>
            Represents an object which can be "resurrected" after expiration.  This is primarily useful
            for objects which are destroyed and recreated as part of an operation like rename or unload.
            In such cases, these objects can notify observers of resurrection through the provided
            IResurrectionScope.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.BeginResurrectionTracking">
            <summary>
            Called if the object should begin watching for and informing others of any
            potential resurrection.
            </summary>
            <returns>An object which tracks resurrection of this object.  This
            scope should be disposed when resurrection tracking is no longer required.</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.IsResurrected">
            <summary>
            Indicates whether the has object been resurrected.  If the resurrectable object is
            disposable, this property is explicitly accessible even if the resurrectable object
            is disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.ResurrectedObject">
            <summary>
            The object that replaced the resurrectable object.  If the resurrectable object is
            disposable, this property is explicitly accessible even if the resurrectable object
            is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectionScope">
            <summary>
            An object which tracks resurrection of an object as a new object instance.
            See IResurrectableObject for more details.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectionScope.Resurrected">
            <summary>
            Raised when the original source object is replaced by a new object instance.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ISearchProvider">
            <summary>
            Represents one of potentially many search providers used for searching
            a PivotTreeView's content.  The ISearchProvider implementation must be stateless
            or must guarantee that the Search method can be called simultaneously from
            multiple threads.  GetDisplayItem will always be called from the UI thread
            to convert a result returned on the background thread into a display item
            to be viewed on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISearchProvider.Search(Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters,System.Action{Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult})">
             <summary>
             Searches the domain understood by the search provider implementation.
             </summary>
             <param name="parameters">Parameters for controlling the scope and result set;
             see the remarks for more details.</param>
             <param name="resultAccumulator">The action that should be invoked each time
             a result is realized.</param>
             <remarks>
             The search provider must return only results matching the SearchQuery provided
             in the search parameters.  Search providers may optionally use the SourceItemHint
             and RelationshipHint properties of the search parameters to implement a more-efficient
             search.  The search provider must return results that are reachable from the source item
             by following the hinted relationship; the provider may optionally return additional results
             that match the search terms but which are not reachable by this relationship,
             if the source item or the relationship are not understood by the provider.
            
             Search must be thread-safe for simultaneous calls from multiple threads.  As such,
             Search should only access properties and members of the SourceItemHint known to be thread-safe.
             </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult">
            <summary>
            Represents a search result realized on a worker thread.  The search result
            should be able to be asked by the UI thread for the display item associated
            with the result.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult.GetDisplayItem">
            <summary>
            Gets the display item that should be shown in the PivotTreeView corresponding
            to the result.
            </summary>
            <returns>The UI object that should be shown in the tree as a search result.</returns>
            <remarks>The data realized on the worker thread may not be showable directly in the UI.
            This result wrapper allows GetDisplayItem to be called on the UI thread to
            get the corresponding UI item for the domain-specific result gather on the
            worker thread.</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService.TryGetFilterProvider(System.Guid,System.UInt32)">
            <summary>
            Attempts to find an ISolutionTreeFilterProvider handled by the given command GUID/ID pair.
            </summary>
            <param name="commandGroup">The command group to find the associated filter provider for.</param>
            <param name="commandId">The command ID to find the associated filter provider for.</param>
            <returns>An ISolutionTreeFilterProvider that handles the given command, or null if there is no associated provider.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService.CreateBatchInitializationScope">
             <summary>
             Creates an object which can be wrapped around a task that may end up initializing
             many IAttachedCollectionSources.  This can be used to optimize certain operations (like transactions)
             that may be more-efficiently performed if it's known that multiple source initializations
             will be occurring.
            
             Extenders can export IBatchInitializationScopeProvider implementations, each of which will
             be called when such a scope is created.  Multiple scopes created at the same time
             will only result in one call to the IBatchInitializationScopeProvider, and upon
             the releast of the last scope, individual scopes returned by IBatchInitializationScopeProvider
             will be freed.
             </summary>
             <returns>An object which should be disposed when the initialization is completed.</returns>
        </member>
    </members>
</doc>
