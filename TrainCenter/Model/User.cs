//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrainCenter.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Security.Cryptography;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Windows.Media.Imaging;

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.Abonements = new HashSet<Abonement>();
            this.TrainPrograms = new HashSet<TrainProgram>();
        }

        public int id { get; set; }
        public string firstName { get; set; }
        public string secondName { get; set; }
        public string mail { get; set; }
        public string password { get; set; }
        public string telNumber { get; set; }
        public string about { get; set; }
        public byte[] image { get; set; }
        public string privilege { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Abonement> Abonements { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TrainProgram> TrainPrograms { get; set; }


        BitmapImage bitmap;
        public BitmapImage BitmapImage
        {
            get { return bitmap; }
            set
            {
                bitmap = value;
                OnPropertyChanged("BitmapImage");
            }
        }


        public string FirstName
        {
            get { return firstName; }
            set
            {
                firstName = value;
                OnPropertyChanged("FirstName");
            }
        }

        public string SecondName
        {
            get { return secondName; }
            set { secondName = value; }
        }

        public string Mail
        {
            get { return mail; }
            set { mail = value; }
        }

        public string TelNumber
        {
            get { return telNumber; }
            set { telNumber = value; }
        }

        public string About
        {
            get { return about; }
            set { about = value; }
        }
        public string Password
        {
            get { return password; }
            set { password = value; }
        }
        public string Privilege
        {
            get { return privilege; }
            set { privilege = value; }
        }

        public User(string firstName, string secondName, string mail, string password)
        {
            FirstName = firstName ?? throw new ArgumentNullException(nameof(firstName));
            SecondName = secondName ?? throw new ArgumentNullException(nameof(secondName));
            Mail = mail ?? throw new ArgumentNullException(nameof(mail));
            Password = password ?? throw new ArgumentNullException(nameof(password));
            TelNumber = "";
            About = "";
            Privilege = "user";
        }

        public User(string firstName, string secondName, string mail, string telNumber, string about)
        {
            FirstName = firstName ?? throw new ArgumentNullException(nameof(firstName));
            SecondName = secondName ?? throw new ArgumentNullException(nameof(secondName));
            Mail = mail ?? throw new ArgumentNullException(nameof(mail));
            TelNumber = telNumber ?? throw new ArgumentNullException(nameof(telNumber));
            About = about ?? throw new ArgumentNullException(nameof(about));
            Privilege = "user";
        }

        public User(string firstName, string secondName, string mail, string telNumber, string about, byte[] image) : this(firstName, secondName, mail, telNumber, about)
        {
            this.image = image;
        }

        public User(string firstName, string secondName, string mail, string telNumber, string about, string privilege)
        {
            FirstName = firstName ?? throw new ArgumentNullException(nameof(firstName));
            SecondName = secondName ?? throw new ArgumentNullException(nameof(secondName));
            Mail = mail ?? throw new ArgumentNullException(nameof(mail));
            TelNumber = telNumber ?? throw new ArgumentNullException(nameof(telNumber));
            About = about ?? throw new ArgumentNullException(nameof(about));
            Privilege = privilege ?? throw new ArgumentNullException(nameof(privilege));
        }

        public User(string firstName, string secondName, string mail, string telNumber, string about, byte[] image, string privilege) : this(firstName, secondName, mail, telNumber, about, image)
        {
            this.privilege = privilege;
        }

        public User(string firstName, string secondName, string mail, string password, string telNumber, string about, byte[] image, string privilege) : this(firstName, secondName, mail, password, telNumber, about)
        {
            this.image = image;
            this.privilege = privilege;
        }

        public string Name
        {
            get { return $"{firstName} {secondName}"; }
        }

        public override string ToString()
        {
            return $"{firstName} {secondName}\n" +
                    $"mail: {mail}\n" +
                    $"privelege: {privilege}\n";
        }

        public string getName()
        {
            return $"{firstName} {secondName}";
        }
        public string getUsersMail()
        {
            return $"{Mail}";
        }

        public string Info
        {
            get
            {
                return $"{firstName} {secondName}\n" +
                        $"mail: {mail}\n" +
                        $"Телефон: {telNumber}";
            }
        }

        public static string getHash(string password)
        {
            if (String.IsNullOrEmpty(password))
            {
                return "-1";
            }
            else
            {
                var md5 = MD5.Create();
                var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(password));
                return Convert.ToBase64String(hash);
            }
        }

        public void LoadPhoto()
        {
            if (image != null)
            {
                using (var ms = new MemoryStream(image))
                {
                    BitmapImage.BeginInit();
                    BitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    BitmapImage.StreamSource = ms;
                    BitmapImage.EndInit();
                }
            }
            OnPropertyChanged("BitmapImage");
        }

        public static bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
            {
                return false;
            }

            try
            {

                email = Regex.Replace(email, @"(@)(.+)$", DomainMapper,
                                      RegexOptions.None, TimeSpan.FromMilliseconds(200));


                string DomainMapper(Match match)
                {

                    var idn = new IdnMapping();


                    var domainName = idn.GetAscii(match.Groups[2].Value);

                    return match.Groups[1].Value + domainName;
                }
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
            catch (ArgumentException)
            {
                return false;
            }

            try
            {
                return Regex.IsMatch(email,
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                    RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }


        public event PropertyChangedEventHandler PropertyChanged;

        void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

